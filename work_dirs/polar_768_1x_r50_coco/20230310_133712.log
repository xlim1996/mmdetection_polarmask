2023-03-10 13:37:12,833 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3080 Ti
CUDA_HOME: /home/ali/miniconda3/envs/mm-polar
NVCC: Cuda compilation tools, release 11.7, V11.7.64
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - Built with CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.5
MMCV CUDA Compiler: 11.7
MMDetection: 2.28.2+e9cae2d
------------------------------------------------------------

2023-03-10 13:37:12,995 - mmdet - INFO - Distributed training: False
2023-03-10 13:37:13,107 - mmdet - INFO - Config:
model = dict(
    type='PolarMask',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=5,
        relu_before_extra_convs=True),
    bbox_head=dict(
        type='PolarMask_Head',
        num_classes=2,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        strides=[8, 16, 32, 64, 128],
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='IoULoss', loss_weight=1.0),
        loss_centerness=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.4,
            min_pos_iou=0.0,
            ignore_iof_thr=-1,
            gt_max_assign_all=False),
        allowed_border=-1,
        pos_weight=-1,
        neg_pos_ratio=3,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        iou_thr=0.5,
        nms=dict(type='nms', iou_thr=0.5),
        max_per_img=100))
dataset_type = 'CocoSegDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        with_label=True),
    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1280, 768),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=False),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    imgs_per_gpu=4,
    workers_per_gpu=5,
    train=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_train2017.json',
        img_prefix='data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                with_label=True),
            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1280, 768),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1280, 768),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
optimizer = dict(
    type='SGD',
    lr=0.01,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/polar_768_1x_r50_coco'
auto_resume = False
gpu_ids = [0]

2023-03-10 13:37:13,107 - mmdet - INFO - Set random seed to 1480830630, deterministic: False
2023-03-10 13:37:13,301 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2023-03-10 13:37:13,362 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.polar_cls.weight - torch.Size([1, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_cls.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_reg.weight - torch.Size([4, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_reg.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_mask.weight - torch.Size([36, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_mask.bias - torch.Size([36]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_centerness.weight - torch.Size([1, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_centerness.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.scales_bbox.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  
2023-03-10 13:37:15,372 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-03-10 13:37:16,020 - mmdet - INFO - Start running, host: ali@Ohm, work_dir: /home/ali/mmdetection/work_dirs/polar_768_1x_r50_coco
2023-03-10 13:37:16,020 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-03-10 13:37:16,021 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2023-03-10 13:37:16,021 - mmdet - INFO - Checkpoints will be saved to /home/ali/mmdetection/work_dirs/polar_768_1x_r50_coco by HardDiskBackend.
2023-03-10 13:37:22,237 - mmdet - INFO - Epoch [1][10/989]	lr: 3.453e-03, eta: 2:02:49, time: 0.622, data_time: 0.253, memory: 6173, loss_cls: 3345.0835, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 3345.0835, grad_norm: 46439.0697
2023-03-10 13:37:25,580 - mmdet - INFO - Epoch [1][20/989]	lr: 3.587e-03, eta: 1:34:21, time: 0.334, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:28,887 - mmdet - INFO - Epoch [1][30/989]	lr: 3.720e-03, eta: 1:24:36, time: 0.331, data_time: 0.020, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:32,188 - mmdet - INFO - Epoch [1][40/989]	lr: 3.853e-03, eta: 1:19:40, time: 0.330, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:35,503 - mmdet - INFO - Epoch [1][50/989]	lr: 3.987e-03, eta: 1:16:44, time: 0.332, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:38,818 - mmdet - INFO - Epoch [1][60/989]	lr: 4.120e-03, eta: 1:14:46, time: 0.331, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:42,154 - mmdet - INFO - Epoch [1][70/989]	lr: 4.253e-03, eta: 1:13:24, time: 0.334, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:45,483 - mmdet - INFO - Epoch [1][80/989]	lr: 4.387e-03, eta: 1:12:21, time: 0.333, data_time: 0.020, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:48,820 - mmdet - INFO - Epoch [1][90/989]	lr: 4.520e-03, eta: 1:11:32, time: 0.334, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:52,150 - mmdet - INFO - Epoch [1][100/989]	lr: 4.653e-03, eta: 1:10:51, time: 0.333, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:55,476 - mmdet - INFO - Epoch [1][110/989]	lr: 4.787e-03, eta: 1:10:17, time: 0.333, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:37:58,806 - mmdet - INFO - Epoch [1][120/989]	lr: 4.920e-03, eta: 1:09:48, time: 0.333, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:02,145 - mmdet - INFO - Epoch [1][130/989]	lr: 5.053e-03, eta: 1:09:24, time: 0.334, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:05,481 - mmdet - INFO - Epoch [1][140/989]	lr: 5.187e-03, eta: 1:09:03, time: 0.334, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:08,822 - mmdet - INFO - Epoch [1][150/989]	lr: 5.320e-03, eta: 1:08:44, time: 0.334, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:12,181 - mmdet - INFO - Epoch [1][160/989]	lr: 5.453e-03, eta: 1:08:29, time: 0.336, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:15,510 - mmdet - INFO - Epoch [1][170/989]	lr: 5.587e-03, eta: 1:08:13, time: 0.333, data_time: 0.020, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:18,831 - mmdet - INFO - Epoch [1][180/989]	lr: 5.720e-03, eta: 1:07:58, time: 0.332, data_time: 0.020, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:22,161 - mmdet - INFO - Epoch [1][190/989]	lr: 5.853e-03, eta: 1:07:45, time: 0.333, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:25,514 - mmdet - INFO - Epoch [1][200/989]	lr: 5.987e-03, eta: 1:07:34, time: 0.335, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:28,856 - mmdet - INFO - Epoch [1][210/989]	lr: 6.120e-03, eta: 1:07:23, time: 0.334, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:32,214 - mmdet - INFO - Epoch [1][220/989]	lr: 6.253e-03, eta: 1:07:13, time: 0.336, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:35,571 - mmdet - INFO - Epoch [1][230/989]	lr: 6.387e-03, eta: 1:07:05, time: 0.336, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:38,923 - mmdet - INFO - Epoch [1][240/989]	lr: 6.520e-03, eta: 1:06:56, time: 0.335, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:42,273 - mmdet - INFO - Epoch [1][250/989]	lr: 6.653e-03, eta: 1:06:48, time: 0.335, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:45,635 - mmdet - INFO - Epoch [1][260/989]	lr: 6.787e-03, eta: 1:06:40, time: 0.336, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:49,000 - mmdet - INFO - Epoch [1][270/989]	lr: 6.920e-03, eta: 1:06:33, time: 0.336, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:52,337 - mmdet - INFO - Epoch [1][280/989]	lr: 7.053e-03, eta: 1:06:26, time: 0.334, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:55,688 - mmdet - INFO - Epoch [1][290/989]	lr: 7.187e-03, eta: 1:06:19, time: 0.335, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:38:59,048 - mmdet - INFO - Epoch [1][300/989]	lr: 7.320e-03, eta: 1:06:12, time: 0.336, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:02,410 - mmdet - INFO - Epoch [1][310/989]	lr: 7.453e-03, eta: 1:06:06, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:05,768 - mmdet - INFO - Epoch [1][320/989]	lr: 7.587e-03, eta: 1:06:00, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:09,134 - mmdet - INFO - Epoch [1][330/989]	lr: 7.720e-03, eta: 1:05:54, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:12,513 - mmdet - INFO - Epoch [1][340/989]	lr: 7.853e-03, eta: 1:05:49, time: 0.338, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:15,870 - mmdet - INFO - Epoch [1][350/989]	lr: 7.987e-03, eta: 1:05:43, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:19,236 - mmdet - INFO - Epoch [1][360/989]	lr: 8.120e-03, eta: 1:05:38, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:22,592 - mmdet - INFO - Epoch [1][370/989]	lr: 8.253e-03, eta: 1:05:33, time: 0.336, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:25,958 - mmdet - INFO - Epoch [1][380/989]	lr: 8.387e-03, eta: 1:05:28, time: 0.337, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:29,333 - mmdet - INFO - Epoch [1][390/989]	lr: 8.520e-03, eta: 1:05:23, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:32,685 - mmdet - INFO - Epoch [1][400/989]	lr: 8.653e-03, eta: 1:05:18, time: 0.335, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:36,044 - mmdet - INFO - Epoch [1][410/989]	lr: 8.787e-03, eta: 1:05:13, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:39,418 - mmdet - INFO - Epoch [1][420/989]	lr: 8.920e-03, eta: 1:05:08, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:42,772 - mmdet - INFO - Epoch [1][430/989]	lr: 9.053e-03, eta: 1:05:03, time: 0.335, data_time: 0.020, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:46,147 - mmdet - INFO - Epoch [1][440/989]	lr: 9.187e-03, eta: 1:04:59, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:49,506 - mmdet - INFO - Epoch [1][450/989]	lr: 9.320e-03, eta: 1:04:54, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:52,889 - mmdet - INFO - Epoch [1][460/989]	lr: 9.453e-03, eta: 1:04:50, time: 0.338, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:56,266 - mmdet - INFO - Epoch [1][470/989]	lr: 9.587e-03, eta: 1:04:46, time: 0.338, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:39:59,640 - mmdet - INFO - Epoch [1][480/989]	lr: 9.720e-03, eta: 1:04:41, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:03,008 - mmdet - INFO - Epoch [1][490/989]	lr: 9.853e-03, eta: 1:04:37, time: 0.337, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:06,385 - mmdet - INFO - Epoch [1][500/989]	lr: 9.987e-03, eta: 1:04:33, time: 0.338, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:09,759 - mmdet - INFO - Epoch [1][510/989]	lr: 1.000e-02, eta: 1:04:29, time: 0.337, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:13,123 - mmdet - INFO - Epoch [1][520/989]	lr: 1.000e-02, eta: 1:04:24, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:16,497 - mmdet - INFO - Epoch [1][530/989]	lr: 1.000e-02, eta: 1:04:20, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:19,871 - mmdet - INFO - Epoch [1][540/989]	lr: 1.000e-02, eta: 1:04:16, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:23,251 - mmdet - INFO - Epoch [1][550/989]	lr: 1.000e-02, eta: 1:04:12, time: 0.338, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:26,621 - mmdet - INFO - Epoch [1][560/989]	lr: 1.000e-02, eta: 1:04:08, time: 0.337, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:29,989 - mmdet - INFO - Epoch [1][570/989]	lr: 1.000e-02, eta: 1:04:04, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:33,352 - mmdet - INFO - Epoch [1][580/989]	lr: 1.000e-02, eta: 1:04:00, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:36,730 - mmdet - INFO - Epoch [1][590/989]	lr: 1.000e-02, eta: 1:03:56, time: 0.338, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:40,093 - mmdet - INFO - Epoch [1][600/989]	lr: 1.000e-02, eta: 1:03:52, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:43,457 - mmdet - INFO - Epoch [1][610/989]	lr: 1.000e-02, eta: 1:03:48, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:46,832 - mmdet - INFO - Epoch [1][620/989]	lr: 1.000e-02, eta: 1:03:44, time: 0.338, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:50,198 - mmdet - INFO - Epoch [1][630/989]	lr: 1.000e-02, eta: 1:03:40, time: 0.337, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:53,562 - mmdet - INFO - Epoch [1][640/989]	lr: 1.000e-02, eta: 1:03:36, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:40:56,920 - mmdet - INFO - Epoch [1][650/989]	lr: 1.000e-02, eta: 1:03:32, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:00,310 - mmdet - INFO - Epoch [1][660/989]	lr: 1.000e-02, eta: 1:03:28, time: 0.339, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:03,682 - mmdet - INFO - Epoch [1][670/989]	lr: 1.000e-02, eta: 1:03:24, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:07,050 - mmdet - INFO - Epoch [1][680/989]	lr: 1.000e-02, eta: 1:03:21, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:10,420 - mmdet - INFO - Epoch [1][690/989]	lr: 1.000e-02, eta: 1:03:17, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:13,785 - mmdet - INFO - Epoch [1][700/989]	lr: 1.000e-02, eta: 1:03:13, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:17,136 - mmdet - INFO - Epoch [1][710/989]	lr: 1.000e-02, eta: 1:03:09, time: 0.335, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:20,504 - mmdet - INFO - Epoch [1][720/989]	lr: 1.000e-02, eta: 1:03:05, time: 0.337, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:23,876 - mmdet - INFO - Epoch [1][730/989]	lr: 1.000e-02, eta: 1:03:01, time: 0.337, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:27,234 - mmdet - INFO - Epoch [1][740/989]	lr: 1.000e-02, eta: 1:02:57, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:30,594 - mmdet - INFO - Epoch [1][750/989]	lr: 1.000e-02, eta: 1:02:53, time: 0.336, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:33,977 - mmdet - INFO - Epoch [1][760/989]	lr: 1.000e-02, eta: 1:02:50, time: 0.338, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:37,334 - mmdet - INFO - Epoch [1][770/989]	lr: 1.000e-02, eta: 1:02:46, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:40,710 - mmdet - INFO - Epoch [1][780/989]	lr: 1.000e-02, eta: 1:02:42, time: 0.338, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:44,100 - mmdet - INFO - Epoch [1][790/989]	lr: 1.000e-02, eta: 1:02:39, time: 0.339, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:47,472 - mmdet - INFO - Epoch [1][800/989]	lr: 1.000e-02, eta: 1:02:35, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:50,856 - mmdet - INFO - Epoch [1][810/989]	lr: 1.000e-02, eta: 1:02:31, time: 0.338, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:54,233 - mmdet - INFO - Epoch [1][820/989]	lr: 1.000e-02, eta: 1:02:28, time: 0.338, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:41:57,614 - mmdet - INFO - Epoch [1][830/989]	lr: 1.000e-02, eta: 1:02:24, time: 0.338, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:00,977 - mmdet - INFO - Epoch [1][840/989]	lr: 1.000e-02, eta: 1:02:21, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:04,357 - mmdet - INFO - Epoch [1][850/989]	lr: 1.000e-02, eta: 1:02:17, time: 0.338, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:07,725 - mmdet - INFO - Epoch [1][860/989]	lr: 1.000e-02, eta: 1:02:13, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:11,133 - mmdet - INFO - Epoch [1][870/989]	lr: 1.000e-02, eta: 1:02:10, time: 0.341, data_time: 0.025, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:14,519 - mmdet - INFO - Epoch [1][880/989]	lr: 1.000e-02, eta: 1:02:07, time: 0.339, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:17,892 - mmdet - INFO - Epoch [1][890/989]	lr: 1.000e-02, eta: 1:02:03, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:21,267 - mmdet - INFO - Epoch [1][900/989]	lr: 1.000e-02, eta: 1:01:59, time: 0.337, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:24,649 - mmdet - INFO - Epoch [1][910/989]	lr: 1.000e-02, eta: 1:01:56, time: 0.338, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:28,035 - mmdet - INFO - Epoch [1][920/989]	lr: 1.000e-02, eta: 1:01:52, time: 0.339, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:31,422 - mmdet - INFO - Epoch [1][930/989]	lr: 1.000e-02, eta: 1:01:49, time: 0.339, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:34,811 - mmdet - INFO - Epoch [1][940/989]	lr: 1.000e-02, eta: 1:01:46, time: 0.339, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:38,210 - mmdet - INFO - Epoch [1][950/989]	lr: 1.000e-02, eta: 1:01:42, time: 0.340, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:41,589 - mmdet - INFO - Epoch [1][960/989]	lr: 1.000e-02, eta: 1:01:39, time: 0.338, data_time: 0.022, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:44,968 - mmdet - INFO - Epoch [1][970/989]	lr: 1.000e-02, eta: 1:01:35, time: 0.338, data_time: 0.023, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:48,326 - mmdet - INFO - Epoch [1][980/989]	lr: 1.000e-02, eta: 1:01:31, time: 0.336, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:42:51,326 - mmdet - INFO - Saving checkpoint at 1 epochs
2023-03-10 13:43:07,173 - mmdet - INFO - Evaluating bbox...
2023-03-10 13:43:07,986 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.000

2023-03-10 13:43:07,993 - mmdet - INFO - Exp name: polar_768_1x_r50_coco.py
2023-03-10 13:43:07,993 - mmdet - INFO - Epoch(val) [1][189]	bbox_mAP: 0.0000, bbox_mAP_50: 0.0000, bbox_mAP_75: 0.0000, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0000, bbox_mAP_copypaste: 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
2023-03-10 13:43:13,764 - mmdet - INFO - Epoch [2][10/989]	lr: 1.000e-02, eta: 1:01:18, time: 0.577, data_time: 0.259, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:43:17,139 - mmdet - INFO - Epoch [2][20/989]	lr: 1.000e-02, eta: 1:01:14, time: 0.337, data_time: 0.020, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:43:20,487 - mmdet - INFO - Epoch [2][30/989]	lr: 1.000e-02, eta: 1:01:10, time: 0.335, data_time: 0.020, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:43:23,837 - mmdet - INFO - Epoch [2][40/989]	lr: 1.000e-02, eta: 1:01:07, time: 0.335, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:43:27,204 - mmdet - INFO - Epoch [2][50/989]	lr: 1.000e-02, eta: 1:01:03, time: 0.337, data_time: 0.020, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
2023-03-10 13:43:30,575 - mmdet - INFO - Epoch [2][60/989]	lr: 1.000e-02, eta: 1:01:00, time: 0.337, data_time: 0.021, memory: 6173, loss_cls: 0.0000, loss_bbox: 0.0000, loss_mask: 0.0000, loss_centerness: 0.0000, loss: 0.0000, grad_norm: 0.0000
