{"env_info": "sys.platform: linux\nPython: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti\nCUDA_HOME: /home/ali/miniconda3/envs/mm-polar\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - Built with CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.2+e9cae2d", "config": "model = dict(\n    type='PolarMask',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='PolarMask_Head',\n        num_classes=4,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0.0,\n            ignore_iof_thr=-1,\n            gt_max_assign_all=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        neg_pos_ratio=3,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        iou_thr=0.5,\n        nms=dict(type='nms', iou_thr=0.5),\n        max_per_img=100))\ndataset_type = 'CocoSegDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        with_label=True),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('ori_shape', 'img_shape', 'pad_shape', 'scale_factor',\n                   'flip'))\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=False,\n        with_label=True),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=False,\n        with_label=False),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1280, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    imgs_per_gpu=4,\n    workers_per_gpu=5,\n    train=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                with_label=True),\n            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip'))\n        ]),\n    val=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=False,\n                with_label=True),\n            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=False,\n                with_label=False),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=1)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/polar_768_1x_r50_coco'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 201755023, "exp_name": "polar_768_1x_r50_coco.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.00345, "memory": 6174, "data_time": 0.25995, "loss_cls": 398.56086, "loss_bbox": 6.23541, "loss_mask": 3.79689, "loss_centerness": 0.63143, "loss": 409.2246, "grad_norm": 12639.73539, "time": 0.62742}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.00359, "memory": 6174, "data_time": 0.02507, "loss_cls": 22.6343, "loss_bbox": 3.03301, "loss_mask": 1.91949, "loss_centerness": 0.7502, "loss": 28.33701, "grad_norm": 1441.59593, "time": 0.33677}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.00372, "memory": 6174, "data_time": 0.02554, "loss_cls": 6.12647, "loss_bbox": 2.93372, "loss_mask": 1.2207, "loss_centerness": 1.53027, "loss": 11.81116, "grad_norm": 230.35202, "time": 0.33831}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.00385, "memory": 6174, "data_time": 0.02384, "loss_cls": 10.00531, "loss_bbox": 3.3557, "loss_mask": 1.10862, "loss_centerness": 1.55522, "loss": 16.02485, "grad_norm": 371.20757, "time": 0.34061}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00399, "memory": 6174, "data_time": 0.02487, "loss_cls": 150.71515, "loss_bbox": 3.69978, "loss_mask": 0.94605, "loss_centerness": 1.21766, "loss": 156.57863, "grad_norm": 6598.80895, "time": 0.34106}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.00412, "memory": 6174, "data_time": 0.02307, "loss_cls": 24.13792, "loss_bbox": 2.76818, "loss_mask": 0.9337, "loss_centerness": 1.3755, "loss": 29.2153, "grad_norm": 819.20668, "time": 0.33737}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.00425, "memory": 6174, "data_time": 0.02289, "loss_cls": 10.63881, "loss_bbox": 3.10144, "loss_mask": 0.81452, "loss_centerness": 1.08532, "loss": 15.64009, "grad_norm": 228.22722, "time": 0.33733}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.00439, "memory": 6174, "data_time": 0.02647, "loss_cls": 17.06494, "loss_bbox": 3.51676, "loss_mask": 0.79558, "loss_centerness": 0.82802, "loss": 22.2053, "grad_norm": 600.70231, "time": 0.34292}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 0.00452, "memory": 6174, "data_time": 0.02725, "loss_cls": 5.79631, "loss_bbox": 4.32163, "loss_mask": 0.66512, "loss_centerness": 0.98768, "loss": 11.77074, "grad_norm": 91.8807, "time": 0.34237}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00465, "memory": 6174, "data_time": 0.02348, "loss_cls": 2.81907, "loss_bbox": 4.8177, "loss_mask": 0.65667, "loss_centerness": 0.77529, "loss": 9.06873, "grad_norm": 39.36298, "time": 0.33559}
{"mode": "train", "epoch": 1, "iter": 110, "lr": 0.00479, "memory": 6174, "data_time": 0.02305, "loss_cls": 3.71881, "loss_bbox": 4.98769, "loss_mask": 0.94086, "loss_centerness": 0.62732, "loss": 10.27468, "grad_norm": 53.71614, "time": 0.33738}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 0.00492, "memory": 6174, "data_time": 0.02329, "loss_cls": 2.96147, "loss_bbox": 4.78547, "loss_mask": 0.66186, "loss_centerness": 0.63805, "loss": 9.04685, "grad_norm": 28.84572, "time": 0.337}
{"mode": "train", "epoch": 1, "iter": 130, "lr": 0.00505, "memory": 6174, "data_time": 0.02266, "loss_cls": 3.245, "loss_bbox": 5.79355, "loss_mask": 0.64182, "loss_centerness": 0.66707, "loss": 10.34743, "grad_norm": 22.12648, "time": 0.33663}
{"mode": "train", "epoch": 1, "iter": 140, "lr": 0.00519, "memory": 6174, "data_time": 0.02437, "loss_cls": 2.87219, "loss_bbox": 6.00837, "loss_mask": 0.55432, "loss_centerness": 0.60945, "loss": 10.04433, "grad_norm": 19.15812, "time": 0.33829}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00532, "memory": 6174, "data_time": 0.02492, "loss_cls": 3.58933, "loss_bbox": 6.9885, "loss_mask": 0.56264, "loss_centerness": 0.70033, "loss": 11.84081, "grad_norm": 31.49858, "time": 0.33942}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 0.00545, "memory": 6174, "data_time": 0.02574, "loss_cls": 2.88566, "loss_bbox": 5.68527, "loss_mask": 0.58541, "loss_centerness": 0.70955, "loss": 9.86589, "grad_norm": 23.52266, "time": 0.34105}
{"mode": "train", "epoch": 1, "iter": 170, "lr": 0.00559, "memory": 6174, "data_time": 0.02532, "loss_cls": 3.31703, "loss_bbox": 5.3832, "loss_mask": 0.53615, "loss_centerness": 0.635, "loss": 9.87138, "grad_norm": 40.8084, "time": 0.33956}
{"mode": "train", "epoch": 1, "iter": 180, "lr": 0.00572, "memory": 6174, "data_time": 0.02482, "loss_cls": 3.71864, "loss_bbox": 3.18585, "loss_mask": 0.55624, "loss_centerness": 0.70344, "loss": 8.16418, "grad_norm": 25.12896, "time": 0.34017}
{"mode": "train", "epoch": 1, "iter": 190, "lr": 0.00585, "memory": 6174, "data_time": 0.02377, "loss_cls": 2.80176, "loss_bbox": 3.44229, "loss_mask": 0.59487, "loss_centerness": 0.5588, "loss": 7.39772, "grad_norm": 19.07167, "time": 0.33935}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00599, "memory": 6174, "data_time": 0.02253, "loss_cls": 2.8484, "loss_bbox": 5.52401, "loss_mask": 0.80503, "loss_centerness": 0.75801, "loss": 9.93544, "grad_norm": 20.01647, "time": 0.34063}
{"mode": "train", "epoch": 1, "iter": 210, "lr": 0.00612, "memory": 6174, "data_time": 0.02644, "loss_cls": 4.05325, "loss_bbox": 5.94651, "loss_mask": 0.72876, "loss_centerness": 0.66568, "loss": 11.3942, "grad_norm": 36.21983, "time": 0.34488}
{"mode": "train", "epoch": 1, "iter": 220, "lr": 0.00625, "memory": 6174, "data_time": 0.02698, "loss_cls": 4.32774, "loss_bbox": 5.51153, "loss_mask": 0.76959, "loss_centerness": 0.69756, "loss": 11.30642, "grad_norm": 26.92423, "time": 0.34339}
