{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti Laptop GPU\nCUDA_HOME: /home/xlim/anaconda3/envs/mm-polar\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - Built with CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.2+b8fb2bf", "config": "model = dict(\n    type='PolarMask',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='PolarMask_Head',\n        num_classes=4,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0.0,\n            ignore_iof_thr=-1,\n            gt_max_assign_all=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        neg_pos_ratio=3,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        iou_thr=0.5,\n        nms=dict(type='nms', iou_thr=0.5),\n        max_per_img=100))\ndataset_type = 'CocoSegDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        with_label=True),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1280, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    imgs_per_gpu=4,\n    workers_per_gpu=5,\n    train=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                with_label=True),\n            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=1)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/polar_768_1x_r50_coco'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 692571888, "exp_name": "polar_768_1x_r50_coco.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.00345, "memory": 6174, "data_time": 0.27331, "loss_cls": 2582.2692, "loss_bbox": 2.2464, "loss_mask": 1.08255, "loss_centerness": 0.18985, "loss": 2585.788, "grad_norm": 31584.78752, "time": 0.8494}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.00359, "memory": 6174, "data_time": 0.03399, "loss_cls": 23.16919, "loss_bbox": 2.94469, "loss_mask": 1.77661, "loss_centerness": 0.40823, "loss": 28.29871, "grad_norm": 1382.53902, "time": 0.53126}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.00372, "memory": 6174, "data_time": 0.03156, "loss_cls": 35.32397, "loss_bbox": 3.04109, "loss_mask": 1.41628, "loss_centerness": 0.6457, "loss": 40.42704, "grad_norm": 1788.63958, "time": 0.52938}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.00385, "memory": 6174, "data_time": 0.02733, "loss_cls": 2.92716, "loss_bbox": 2.2701, "loss_mask": 1.06069, "loss_centerness": 0.54749, "loss": 6.80545, "grad_norm": 40.54526, "time": 0.53515}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00399, "memory": 6174, "data_time": 0.03052, "loss_cls": 8.17094, "loss_bbox": 1.52384, "loss_mask": 0.33753, "loss_centerness": 0.32627, "loss": 10.35859, "grad_norm": 439.00116, "time": 0.52918}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.00412, "memory": 6174, "data_time": 0.03195, "loss_cls": 4.13627, "loss_bbox": 3.0272, "loss_mask": 0.75348, "loss_centerness": 1.18153, "loss": 9.09849, "grad_norm": 47.21172, "time": 0.53963}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.00425, "memory": 6174, "data_time": 0.03657, "loss_cls": 9.48942, "loss_bbox": 3.99129, "loss_mask": 0.65591, "loss_centerness": 0.46109, "loss": 14.59771, "grad_norm": 233.45785, "time": 0.53959}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.00439, "memory": 6174, "data_time": 0.03357, "loss_cls": 2.89825, "loss_bbox": 3.00612, "loss_mask": 0.47296, "loss_centerness": 0.23055, "loss": 6.60789, "grad_norm": 21.25015, "time": 0.56158}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 0.00452, "memory": 6174, "data_time": 0.03434, "loss_cls": 7.34315, "loss_bbox": 2.02785, "loss_mask": 0.59471, "loss_centerness": 0.31523, "loss": 10.28094, "grad_norm": 215.08302, "time": 0.54225}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00465, "memory": 6174, "data_time": 0.02711, "loss_cls": 6.53148, "loss_bbox": 2.36463, "loss_mask": 0.77403, "loss_centerness": 0.77181, "loss": 10.44195, "grad_norm": 154.72942, "time": 0.5398}
{"mode": "train", "epoch": 1, "iter": 110, "lr": 0.00479, "memory": 6174, "data_time": 0.03726, "loss_cls": 2.38657, "loss_bbox": 0.86804, "loss_mask": 0.22978, "loss_centerness": 0.311, "loss": 3.7954, "grad_norm": 13.0602, "time": 0.58896}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 0.00492, "memory": 6174, "data_time": 0.02943, "loss_cls": 6.71867, "loss_bbox": 1.95364, "loss_mask": 0.6511, "loss_centerness": 0.73141, "loss": 10.05482, "grad_norm": 95.88485, "time": 0.54852}
{"mode": "train", "epoch": 1, "iter": 130, "lr": 0.00505, "memory": 6174, "data_time": 0.0246, "loss_cls": 5.63492, "loss_bbox": 1.38002, "loss_mask": 0.3803, "loss_centerness": 0.3766, "loss": 7.77184, "grad_norm": 70.97789, "time": 0.55406}
{"mode": "train", "epoch": 1, "iter": 140, "lr": 0.00519, "memory": 6174, "data_time": 0.0269, "loss_cls": 8.07333, "loss_bbox": 1.29257, "loss_mask": 0.31822, "loss_centerness": 0.37747, "loss": 10.06159, "grad_norm": 233.78206, "time": 0.57997}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00532, "memory": 6174, "data_time": 0.02606, "loss_cls": 1.43198, "loss_bbox": 1.41618, "loss_mask": 0.32842, "loss_centerness": 0.12327, "loss": 3.29985, "grad_norm": 10.99955, "time": 0.56784}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 0.00545, "memory": 6174, "data_time": 0.03158, "loss_cls": 3.92511, "loss_bbox": 2.07803, "loss_mask": 0.43801, "loss_centerness": 0.30089, "loss": 6.74205, "grad_norm": 79.22917, "time": 0.56162}
{"mode": "train", "epoch": 1, "iter": 170, "lr": 0.00559, "memory": 6174, "data_time": 0.03451, "loss_cls": 5.64267, "loss_bbox": 3.52022, "loss_mask": 0.83375, "loss_centerness": 0.56779, "loss": 10.56443, "grad_norm": 122.93396, "time": 0.56788}
{"mode": "train", "epoch": 1, "iter": 180, "lr": 0.00572, "memory": 6174, "data_time": 0.03476, "loss_cls": 4.00315, "loss_bbox": 3.28909, "loss_mask": 0.58688, "loss_centerness": 0.57381, "loss": 8.45293, "grad_norm": 36.64293, "time": 0.57879}
{"mode": "train", "epoch": 1, "iter": 190, "lr": 0.00585, "memory": 6174, "data_time": 0.03117, "loss_cls": 3.96503, "loss_bbox": 1.85309, "loss_mask": 0.41636, "loss_centerness": 0.37777, "loss": 6.61225, "grad_norm": 51.06359, "time": 0.56715}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00599, "memory": 6174, "data_time": 0.03626, "loss_cls": 4.12609, "loss_bbox": 2.92653, "loss_mask": 0.32828, "loss_centerness": 0.29708, "loss": 7.67797, "grad_norm": 59.90448, "time": 0.54993}
{"mode": "train", "epoch": 1, "iter": 210, "lr": 0.00612, "memory": 6174, "data_time": 0.03284, "loss_cls": 6.95681, "loss_bbox": 3.59903, "loss_mask": 0.56231, "loss_centerness": 0.49352, "loss": 11.61168, "grad_norm": 107.45975, "time": 0.54604}
{"mode": "train", "epoch": 1, "iter": 220, "lr": 0.00625, "memory": 6174, "data_time": 0.03409, "loss_cls": 4.04746, "loss_bbox": 3.33371, "loss_mask": 0.38122, "loss_centerness": 0.31959, "loss": 8.08198, "grad_norm": 9.71328, "time": 0.57475}
{"mode": "train", "epoch": 1, "iter": 230, "lr": 0.00639, "memory": 6174, "data_time": 0.03273, "loss_cls": 4.53096, "loss_bbox": 2.80633, "loss_mask": 0.55863, "loss_centerness": 0.35887, "loss": 8.25479, "grad_norm": 40.48945, "time": 0.5725}
