2023-03-10 15:18:01,270 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3080 Ti
CUDA_HOME: /home/ali/miniconda3/envs/mm-polar
NVCC: Cuda compilation tools, release 11.7, V11.7.64
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - Built with CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.5
MMCV CUDA Compiler: 11.7
MMDetection: 2.28.2+e9cae2d
------------------------------------------------------------

2023-03-10 15:18:01,427 - mmdet - INFO - Distributed training: False
2023-03-10 15:18:01,536 - mmdet - INFO - Config:
model = dict(
    type='PolarMask',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=5,
        relu_before_extra_convs=True),
    bbox_head=dict(
        type='PolarMask_Head',
        num_classes=4,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        strides=[8, 16, 32, 64, 128],
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='IoULoss', loss_weight=1.0),
        loss_centerness=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.4,
            min_pos_iou=0.0,
            ignore_iof_thr=-1,
            gt_max_assign_all=False),
        allowed_border=-1,
        pos_weight=-1,
        neg_pos_ratio=3,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        iou_thr=0.5,
        nms=dict(type='nms', iou_thr=0.5),
        max_per_img=100))
dataset_type = 'CocoSegDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        with_label=True),
    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1280, 768),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=False),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    imgs_per_gpu=4,
    workers_per_gpu=5,
    train=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_train2017.json',
        img_prefix='data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                with_label=True),
            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1280, 768),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1280, 768),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
optimizer = dict(
    type='SGD',
    lr=0.01,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=1)
checkpoint_config = dict(interval=1)
log_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/polar_768_1x_r50_coco'
auto_resume = False
gpu_ids = [0]

2023-03-10 15:18:01,536 - mmdet - INFO - Set random seed to 1310101404, deterministic: False
2023-03-10 15:18:01,725 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2023-03-10 15:18:01,792 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.polar_cls.weight - torch.Size([3, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_cls.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_reg.weight - torch.Size([4, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_reg.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_mask.weight - torch.Size([36, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_mask.bias - torch.Size([36]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_centerness.weight - torch.Size([1, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_centerness.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.scales_bbox.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  
2023-03-10 15:18:04,316 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-03-10 15:18:05,067 - mmdet - INFO - Start running, host: ali@Ohm, work_dir: /home/ali/mmdetection/work_dirs/polar_768_1x_r50_coco
2023-03-10 15:18:05,067 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-03-10 15:18:05,067 - mmdet - INFO - workflow: [('train', 1)], max: 1 epochs
2023-03-10 15:18:05,067 - mmdet - INFO - Checkpoints will be saved to /home/ali/mmdetection/work_dirs/polar_768_1x_r50_coco by HardDiskBackend.
2023-03-10 15:18:11,287 - mmdet - INFO - Epoch [1][10/4068]	lr: 3.453e-03, eta: 0:42:03, time: 0.622, data_time: 0.268, memory: 6174, loss_cls: 214.0832, loss_bbox: 6.8023, loss_mask: 4.3102, loss_centerness: 0.7352, loss: 225.9310, grad_norm: 3487.4740
2023-03-10 15:18:14,507 - mmdet - INFO - Epoch [1][20/4068]	lr: 3.587e-03, eta: 0:31:50, time: 0.322, data_time: 0.028, memory: 6174, loss_cls: 20.9390, loss_bbox: 5.1484, loss_mask: 1.9589, loss_centerness: 0.6299, loss: 28.6763, grad_norm: 1192.9858
2023-03-10 15:18:17,735 - mmdet - INFO - Epoch [1][30/4068]	lr: 3.720e-03, eta: 0:28:24, time: 0.323, data_time: 0.027, memory: 6174, loss_cls: 18.1789, loss_bbox: 2.6468, loss_mask: 1.2816, loss_centerness: 0.6628, loss: 22.7701, grad_norm: 840.2487
2023-03-10 15:18:20,963 - mmdet - INFO - Epoch [1][40/4068]	lr: 3.853e-03, eta: 0:26:40, time: 0.323, data_time: 0.027, memory: 6174, loss_cls: 19.2354, loss_bbox: 1.8543, loss_mask: 1.5082, loss_centerness: 1.0384, loss: 23.6362, grad_norm: 810.7814
2023-03-10 15:18:24,161 - mmdet - INFO - Epoch [1][50/4068]	lr: 3.987e-03, eta: 0:25:34, time: 0.320, data_time: 0.026, memory: 6174, loss_cls: 8.6354, loss_bbox: 2.5333, loss_mask: 0.9884, loss_centerness: 0.7189, loss: 12.8761, grad_norm: 249.9412
2023-03-10 15:18:27,374 - mmdet - INFO - Epoch [1][60/4068]	lr: 4.120e-03, eta: 0:24:49, time: 0.321, data_time: 0.026, memory: 6174, loss_cls: 10.3192, loss_bbox: 2.4501, loss_mask: 1.0060, loss_centerness: 0.6964, loss: 14.4717, grad_norm: 328.4216
2023-03-10 15:18:30,583 - mmdet - INFO - Epoch [1][70/4068]	lr: 4.253e-03, eta: 0:24:17, time: 0.321, data_time: 0.028, memory: 6174, loss_cls: 7.8965, loss_bbox: 2.2119, loss_mask: 0.8420, loss_centerness: 0.9212, loss: 11.8716, grad_norm: 221.2768
2023-03-10 15:18:33,799 - mmdet - INFO - Epoch [1][80/4068]	lr: 4.387e-03, eta: 0:23:52, time: 0.322, data_time: 0.026, memory: 6174, loss_cls: 4.0478, loss_bbox: 2.3216, loss_mask: 0.7297, loss_centerness: 0.6974, loss: 7.7965, grad_norm: 29.5862
2023-03-10 15:18:36,986 - mmdet - INFO - Epoch [1][90/4068]	lr: 4.520e-03, eta: 0:23:30, time: 0.319, data_time: 0.025, memory: 6174, loss_cls: 14.1927, loss_bbox: 4.9083, loss_mask: 0.6635, loss_centerness: 0.6992, loss: 20.4636, grad_norm: 400.9223
2023-03-10 15:18:40,212 - mmdet - INFO - Epoch [1][100/4068]	lr: 4.653e-03, eta: 0:23:14, time: 0.323, data_time: 0.026, memory: 6174, loss_cls: 2.4186, loss_bbox: 4.5213, loss_mask: 0.7066, loss_centerness: 0.7579, loss: 8.4043, grad_norm: 23.9269
2023-03-10 15:18:43,529 - mmdet - INFO - Epoch [1][110/4068]	lr: 4.787e-03, eta: 0:23:03, time: 0.332, data_time: 0.026, memory: 6174, loss_cls: 5.6390, loss_bbox: 4.1171, loss_mask: 0.5227, loss_centerness: 0.8752, loss: 11.1539, grad_norm: 114.9225
2023-03-10 15:18:46,712 - mmdet - INFO - Epoch [1][120/4068]	lr: 4.920e-03, eta: 0:22:50, time: 0.318, data_time: 0.025, memory: 6174, loss_cls: 4.7900, loss_bbox: 3.7062, loss_mask: 0.6917, loss_centerness: 0.6695, loss: 9.8574, grad_norm: 61.7298
2023-03-10 15:18:49,918 - mmdet - INFO - Epoch [1][130/4068]	lr: 5.053e-03, eta: 0:22:38, time: 0.321, data_time: 0.026, memory: 6174, loss_cls: 3.0136, loss_bbox: 2.3395, loss_mask: 0.6740, loss_centerness: 0.7058, loss: 6.7330, grad_norm: 22.5247
2023-03-10 15:18:53,094 - mmdet - INFO - Epoch [1][140/4068]	lr: 5.187e-03, eta: 0:22:27, time: 0.318, data_time: 0.024, memory: 6174, loss_cls: 2.5654, loss_bbox: 2.8218, loss_mask: 0.5778, loss_centerness: 0.6007, loss: 6.5658, grad_norm: 24.6542
2023-03-10 15:18:56,282 - mmdet - INFO - Epoch [1][150/4068]	lr: 5.320e-03, eta: 0:22:17, time: 0.319, data_time: 0.025, memory: 6174, loss_cls: 4.6628, loss_bbox: 4.9958, loss_mask: 0.7847, loss_centerness: 0.7345, loss: 11.1779, grad_norm: 35.2604
2023-03-10 15:18:59,478 - mmdet - INFO - Epoch [1][160/4068]	lr: 5.453e-03, eta: 0:22:08, time: 0.320, data_time: 0.025, memory: 6174, loss_cls: 5.2421, loss_bbox: 3.0274, loss_mask: 0.5810, loss_centerness: 0.7358, loss: 9.5863, grad_norm: 56.9473
2023-03-10 15:19:02,661 - mmdet - INFO - Epoch [1][170/4068]	lr: 5.587e-03, eta: 0:22:00, time: 0.318, data_time: 0.024, memory: 6174, loss_cls: 4.0613, loss_bbox: 2.5504, loss_mask: 0.5779, loss_centerness: 0.6738, loss: 7.8632, grad_norm: 26.8888
2023-03-10 15:19:05,874 - mmdet - INFO - Epoch [1][180/4068]	lr: 5.720e-03, eta: 0:21:53, time: 0.321, data_time: 0.027, memory: 6174, loss_cls: 4.6836, loss_bbox: 1.9701, loss_mask: 0.6023, loss_centerness: 0.7073, loss: 7.9634, grad_norm: 52.7888
2023-03-10 15:19:09,049 - mmdet - INFO - Epoch [1][190/4068]	lr: 5.853e-03, eta: 0:21:45, time: 0.317, data_time: 0.024, memory: 6174, loss_cls: 3.9842, loss_bbox: 2.1105, loss_mask: 0.5341, loss_centerness: 0.5991, loss: 7.2279, grad_norm: 18.8632
2023-03-10 15:19:12,253 - mmdet - INFO - Epoch [1][200/4068]	lr: 5.987e-03, eta: 0:21:39, time: 0.320, data_time: 0.026, memory: 6174, loss_cls: 3.0442, loss_bbox: 2.3259, loss_mask: 0.6514, loss_centerness: 0.6606, loss: 6.6821, grad_norm: 15.4898
2023-03-10 15:19:15,456 - mmdet - INFO - Epoch [1][210/4068]	lr: 6.120e-03, eta: 0:21:33, time: 0.320, data_time: 0.025, memory: 6174, loss_cls: 2.9035, loss_bbox: 2.2471, loss_mask: 0.5683, loss_centerness: 0.5795, loss: 6.2984, grad_norm: 24.0395
2023-03-10 15:19:18,665 - mmdet - INFO - Epoch [1][220/4068]	lr: 6.253e-03, eta: 0:21:27, time: 0.321, data_time: 0.025, memory: 6174, loss_cls: 3.3857, loss_bbox: 3.0018, loss_mask: 0.8441, loss_centerness: 0.6674, loss: 7.8989, grad_norm: 27.9574
2023-03-10 15:19:21,858 - mmdet - INFO - Epoch [1][230/4068]	lr: 6.387e-03, eta: 0:21:21, time: 0.319, data_time: 0.025, memory: 6174, loss_cls: 2.9278, loss_bbox: 3.0400, loss_mask: 0.4994, loss_centerness: 0.5974, loss: 7.0646, grad_norm: 15.4534
2023-03-10 15:19:25,042 - mmdet - INFO - Epoch [1][240/4068]	lr: 6.520e-03, eta: 0:21:15, time: 0.318, data_time: 0.024, memory: 6174, loss_cls: 3.0336, loss_bbox: 2.2184, loss_mask: 0.4461, loss_centerness: 0.5416, loss: 6.2398, grad_norm: 15.4760
2023-03-10 15:19:28,245 - mmdet - INFO - Epoch [1][250/4068]	lr: 6.653e-03, eta: 0:21:10, time: 0.320, data_time: 0.025, memory: 6174, loss_cls: 3.9696, loss_bbox: 2.0191, loss_mask: 0.6715, loss_centerness: 0.6660, loss: 7.3263, grad_norm: 15.5568
2023-03-10 15:19:31,438 - mmdet - INFO - Epoch [1][260/4068]	lr: 6.787e-03, eta: 0:21:04, time: 0.319, data_time: 0.025, memory: 6174, loss_cls: 2.6475, loss_bbox: 2.1160, loss_mask: 0.5785, loss_centerness: 0.6627, loss: 6.0047, grad_norm: 12.7264
2023-03-10 15:19:34,626 - mmdet - INFO - Epoch [1][270/4068]	lr: 6.920e-03, eta: 0:20:59, time: 0.319, data_time: 0.023, memory: 6174, loss_cls: 2.2867, loss_bbox: 2.0515, loss_mask: 0.5660, loss_centerness: 0.6804, loss: 5.5846, grad_norm: 13.3590
2023-03-10 15:19:37,846 - mmdet - INFO - Epoch [1][280/4068]	lr: 7.053e-03, eta: 0:20:55, time: 0.322, data_time: 0.026, memory: 6174, loss_cls: 2.3604, loss_bbox: 2.1414, loss_mask: 0.5977, loss_centerness: 0.5957, loss: 5.6952, grad_norm: 13.2351
2023-03-10 15:19:41,053 - mmdet - INFO - Epoch [1][290/4068]	lr: 7.187e-03, eta: 0:20:50, time: 0.321, data_time: 0.025, memory: 6174, loss_cls: 2.4643, loss_bbox: 2.0793, loss_mask: 0.6245, loss_centerness: 0.6026, loss: 5.7707, grad_norm: 12.6097
2023-03-10 15:19:44,261 - mmdet - INFO - Epoch [1][300/4068]	lr: 7.320e-03, eta: 0:20:45, time: 0.321, data_time: 0.026, memory: 6174, loss_cls: 2.7811, loss_bbox: 3.1289, loss_mask: 0.5783, loss_centerness: 0.7050, loss: 7.1933, grad_norm: 15.2546
2023-03-10 15:19:47,441 - mmdet - INFO - Epoch [1][310/4068]	lr: 7.453e-03, eta: 0:20:41, time: 0.318, data_time: 0.022, memory: 6174, loss_cls: 2.4411, loss_bbox: 2.8662, loss_mask: 0.6875, loss_centerness: 0.6524, loss: 6.6471, grad_norm: 13.5725
2023-03-10 15:19:50,691 - mmdet - INFO - Epoch [1][320/4068]	lr: 7.587e-03, eta: 0:20:37, time: 0.325, data_time: 0.029, memory: 6174, loss_cls: 2.0145, loss_bbox: 1.7549, loss_mask: 0.5552, loss_centerness: 0.5972, loss: 4.9218, grad_norm: 11.3014
2023-03-10 15:19:53,889 - mmdet - INFO - Epoch [1][330/4068]	lr: 7.720e-03, eta: 0:20:32, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 2.0514, loss_bbox: 2.2961, loss_mask: 0.5685, loss_centerness: 0.6543, loss: 5.5702, grad_norm: 11.6965
2023-03-10 15:19:57,150 - mmdet - INFO - Epoch [1][340/4068]	lr: 7.853e-03, eta: 0:20:28, time: 0.326, data_time: 0.024, memory: 6174, loss_cls: 2.2997, loss_bbox: 2.5472, loss_mask: 0.7280, loss_centerness: 0.6810, loss: 6.2559, grad_norm: 13.5523
2023-03-10 15:20:00,329 - mmdet - INFO - Epoch [1][350/4068]	lr: 7.987e-03, eta: 0:20:24, time: 0.318, data_time: 0.023, memory: 6174, loss_cls: 1.9445, loss_bbox: 2.1341, loss_mask: 0.7345, loss_centerness: 0.6869, loss: 5.5000, grad_norm: 11.1823
2023-03-10 15:20:03,521 - mmdet - INFO - Epoch [1][360/4068]	lr: 8.120e-03, eta: 0:20:20, time: 0.319, data_time: 0.024, memory: 6174, loss_cls: 2.2107, loss_bbox: 2.2667, loss_mask: 0.5512, loss_centerness: 0.7135, loss: 5.7421, grad_norm: 12.9966
2023-03-10 15:20:06,716 - mmdet - INFO - Epoch [1][370/4068]	lr: 8.253e-03, eta: 0:20:15, time: 0.319, data_time: 0.025, memory: 6174, loss_cls: 2.1554, loss_bbox: 1.7121, loss_mask: 0.6047, loss_centerness: 0.6758, loss: 5.1480, grad_norm: 11.7216
2023-03-10 15:20:09,921 - mmdet - INFO - Epoch [1][380/4068]	lr: 8.387e-03, eta: 0:20:11, time: 0.321, data_time: 0.025, memory: 6174, loss_cls: 2.1123, loss_bbox: 2.2760, loss_mask: 0.7310, loss_centerness: 0.7045, loss: 5.8236, grad_norm: 10.7497
2023-03-10 15:20:13,135 - mmdet - INFO - Epoch [1][390/4068]	lr: 8.520e-03, eta: 0:20:07, time: 0.321, data_time: 0.026, memory: 6174, loss_cls: 3.2514, loss_bbox: 1.5886, loss_mask: 0.7646, loss_centerness: 0.5982, loss: 6.2029, grad_norm: 18.9328
2023-03-10 15:20:16,337 - mmdet - INFO - Epoch [1][400/4068]	lr: 8.653e-03, eta: 0:20:03, time: 0.320, data_time: 0.025, memory: 6174, loss_cls: 2.2763, loss_bbox: 1.7536, loss_mask: 0.5725, loss_centerness: 0.6001, loss: 5.2024, grad_norm: 13.1462
2023-03-10 15:20:19,577 - mmdet - INFO - Epoch [1][410/4068]	lr: 8.787e-03, eta: 0:20:00, time: 0.324, data_time: 0.028, memory: 6174, loss_cls: 2.2057, loss_bbox: 2.1136, loss_mask: 0.5921, loss_centerness: 0.6340, loss: 5.5454, grad_norm: 11.4233
2023-03-10 15:20:22,854 - mmdet - INFO - Epoch [1][420/4068]	lr: 8.920e-03, eta: 0:19:56, time: 0.328, data_time: 0.033, memory: 6174, loss_cls: 2.8952, loss_bbox: 2.4803, loss_mask: 0.7416, loss_centerness: 0.6985, loss: 6.8156, grad_norm: 15.1429
2023-03-10 15:20:26,072 - mmdet - INFO - Epoch [1][430/4068]	lr: 9.053e-03, eta: 0:19:52, time: 0.322, data_time: 0.026, memory: 6174, loss_cls: 2.4665, loss_bbox: 2.4673, loss_mask: 0.6519, loss_centerness: 0.6589, loss: 6.2446, grad_norm: 12.9339
2023-03-10 15:20:29,291 - mmdet - INFO - Epoch [1][440/4068]	lr: 9.187e-03, eta: 0:19:49, time: 0.322, data_time: 0.026, memory: 6174, loss_cls: 2.3199, loss_bbox: 2.1667, loss_mask: 0.5356, loss_centerness: 0.6235, loss: 5.6457, grad_norm: 15.2580
2023-03-10 15:20:32,506 - mmdet - INFO - Epoch [1][450/4068]	lr: 9.320e-03, eta: 0:19:45, time: 0.321, data_time: 0.026, memory: 6174, loss_cls: 3.7065, loss_bbox: 2.3188, loss_mask: 0.5070, loss_centerness: 0.6784, loss: 7.2106, grad_norm: 14.1415
2023-03-10 15:20:35,718 - mmdet - INFO - Epoch [1][460/4068]	lr: 9.453e-03, eta: 0:19:41, time: 0.321, data_time: 0.026, memory: 6174, loss_cls: 2.2776, loss_bbox: 2.3299, loss_mask: 0.5334, loss_centerness: 0.6303, loss: 5.7711, grad_norm: 11.1388
2023-03-10 15:20:38,930 - mmdet - INFO - Epoch [1][470/4068]	lr: 9.587e-03, eta: 0:19:37, time: 0.321, data_time: 0.026, memory: 6174, loss_cls: 2.9162, loss_bbox: 1.5170, loss_mask: 0.4583, loss_centerness: 0.5196, loss: 5.4111, grad_norm: 10.6573
2023-03-10 15:20:42,130 - mmdet - INFO - Epoch [1][480/4068]	lr: 9.720e-03, eta: 0:19:34, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 2.6943, loss_bbox: 1.6656, loss_mask: 0.6960, loss_centerness: 0.6687, loss: 5.7247, grad_norm: 12.9796
2023-03-10 15:20:45,334 - mmdet - INFO - Epoch [1][490/4068]	lr: 9.853e-03, eta: 0:19:30, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 2.7950, loss_bbox: 1.8455, loss_mask: 1.1028, loss_centerness: 0.7014, loss: 6.4446, grad_norm: 12.0702
2023-03-10 15:20:48,637 - mmdet - INFO - Epoch [1][500/4068]	lr: 9.987e-03, eta: 0:19:27, time: 0.330, data_time: 0.024, memory: 6174, loss_cls: 2.1001, loss_bbox: 1.9229, loss_mask: 1.1628, loss_centerness: 0.7025, loss: 5.8883, grad_norm: 10.7408
2023-03-10 15:20:51,951 - mmdet - INFO - Epoch [1][510/4068]	lr: 1.000e-02, eta: 0:19:24, time: 0.331, data_time: 0.025, memory: 6174, loss_cls: 2.1048, loss_bbox: 1.0946, loss_mask: 0.7963, loss_centerness: 0.6671, loss: 4.6629, grad_norm: 8.6569
2023-03-10 15:20:55,194 - mmdet - INFO - Epoch [1][520/4068]	lr: 1.000e-02, eta: 0:19:20, time: 0.324, data_time: 0.025, memory: 6174, loss_cls: 4.9392, loss_bbox: 0.9201, loss_mask: 0.5528, loss_centerness: 0.5204, loss: 6.9325, grad_norm: 13.8154
2023-03-10 15:20:58,455 - mmdet - INFO - Epoch [1][530/4068]	lr: 1.000e-02, eta: 0:19:17, time: 0.326, data_time: 0.028, memory: 6174, loss_cls: 3.9122, loss_bbox: 1.1495, loss_mask: 0.4924, loss_centerness: 0.7077, loss: 6.2618, grad_norm: 26.1229
2023-03-10 15:21:01,762 - mmdet - INFO - Epoch [1][540/4068]	lr: 1.000e-02, eta: 0:19:14, time: 0.331, data_time: 0.025, memory: 6174, loss_cls: 3.9600, loss_bbox: 1.3640, loss_mask: 0.6553, loss_centerness: 0.6123, loss: 6.5917, grad_norm: 13.4588
2023-03-10 15:21:05,030 - mmdet - INFO - Epoch [1][550/4068]	lr: 1.000e-02, eta: 0:19:11, time: 0.327, data_time: 0.024, memory: 6174, loss_cls: 2.5674, loss_bbox: 3.0434, loss_mask: 0.8619, loss_centerness: 0.6239, loss: 7.0965, grad_norm: 13.7658
2023-03-10 15:21:08,229 - mmdet - INFO - Epoch [1][560/4068]	lr: 1.000e-02, eta: 0:19:07, time: 0.320, data_time: 0.022, memory: 6174, loss_cls: 3.2609, loss_bbox: 2.4141, loss_mask: 0.7465, loss_centerness: 0.7056, loss: 7.1272, grad_norm: 14.3136
2023-03-10 15:21:11,512 - mmdet - INFO - Epoch [1][570/4068]	lr: 1.000e-02, eta: 0:19:04, time: 0.328, data_time: 0.024, memory: 6174, loss_cls: 2.1376, loss_bbox: 2.1290, loss_mask: 0.6629, loss_centerness: 0.6872, loss: 5.6167, grad_norm: 10.5083
2023-03-10 15:21:14,865 - mmdet - INFO - Epoch [1][580/4068]	lr: 1.000e-02, eta: 0:19:01, time: 0.335, data_time: 0.024, memory: 6174, loss_cls: 2.3664, loss_bbox: 2.2889, loss_mask: 0.5889, loss_centerness: 0.6736, loss: 5.9178, grad_norm: 9.8207
2023-03-10 15:21:18,116 - mmdet - INFO - Epoch [1][590/4068]	lr: 1.000e-02, eta: 0:18:57, time: 0.325, data_time: 0.027, memory: 6174, loss_cls: 2.1621, loss_bbox: 1.4841, loss_mask: 0.5167, loss_centerness: 0.6084, loss: 4.7712, grad_norm: 8.8741
2023-03-10 15:21:21,358 - mmdet - INFO - Epoch [1][600/4068]	lr: 1.000e-02, eta: 0:18:54, time: 0.324, data_time: 0.026, memory: 6174, loss_cls: 2.9215, loss_bbox: 1.5515, loss_mask: 0.4391, loss_centerness: 0.6161, loss: 5.5282, grad_norm: 9.2246
2023-03-10 15:21:24,647 - mmdet - INFO - Epoch [1][610/4068]	lr: 1.000e-02, eta: 0:18:51, time: 0.329, data_time: 0.027, memory: 6174, loss_cls: 2.2585, loss_bbox: 1.8079, loss_mask: 0.5162, loss_centerness: 0.6534, loss: 5.2361, grad_norm: 9.7783
2023-03-10 15:21:27,883 - mmdet - INFO - Epoch [1][620/4068]	lr: 1.000e-02, eta: 0:18:47, time: 0.324, data_time: 0.025, memory: 6174, loss_cls: 2.0992, loss_bbox: 1.9103, loss_mask: 0.5293, loss_centerness: 0.6811, loss: 5.2199, grad_norm: 7.5486
2023-03-10 15:21:31,188 - mmdet - INFO - Epoch [1][630/4068]	lr: 1.000e-02, eta: 0:18:44, time: 0.330, data_time: 0.030, memory: 6174, loss_cls: 2.6559, loss_bbox: 1.1302, loss_mask: 0.4500, loss_centerness: 0.6234, loss: 4.8594, grad_norm: 12.7856
2023-03-10 15:21:34,419 - mmdet - INFO - Epoch [1][640/4068]	lr: 1.000e-02, eta: 0:18:41, time: 0.323, data_time: 0.026, memory: 6174, loss_cls: 3.0133, loss_bbox: 1.0854, loss_mask: 0.5610, loss_centerness: 0.6730, loss: 5.3327, grad_norm: 7.3670
2023-03-10 15:21:37,658 - mmdet - INFO - Epoch [1][650/4068]	lr: 1.000e-02, eta: 0:18:37, time: 0.324, data_time: 0.026, memory: 6174, loss_cls: 2.2252, loss_bbox: 1.0902, loss_mask: 0.6225, loss_centerness: 0.6801, loss: 4.6181, grad_norm: 6.5707
2023-03-10 15:21:40,888 - mmdet - INFO - Epoch [1][660/4068]	lr: 1.000e-02, eta: 0:18:34, time: 0.323, data_time: 0.027, memory: 6174, loss_cls: 2.3306, loss_bbox: 1.0089, loss_mask: 0.7202, loss_centerness: 0.6010, loss: 4.6606, grad_norm: 8.1872
2023-03-10 15:21:44,143 - mmdet - INFO - Epoch [1][670/4068]	lr: 1.000e-02, eta: 0:18:31, time: 0.326, data_time: 0.029, memory: 6174, loss_cls: 2.2474, loss_bbox: 1.0064, loss_mask: 0.5681, loss_centerness: 0.6387, loss: 4.4605, grad_norm: 6.8267
2023-03-10 15:21:47,378 - mmdet - INFO - Epoch [1][680/4068]	lr: 1.000e-02, eta: 0:18:27, time: 0.323, data_time: 0.026, memory: 6174, loss_cls: 1.7823, loss_bbox: 0.7371, loss_mask: 0.4302, loss_centerness: 0.4638, loss: 3.4133, grad_norm: 6.4641
2023-03-10 15:21:50,604 - mmdet - INFO - Epoch [1][690/4068]	lr: 1.000e-02, eta: 0:18:24, time: 0.323, data_time: 0.025, memory: 6174, loss_cls: 2.0568, loss_bbox: 1.0269, loss_mask: 0.6645, loss_centerness: 0.6738, loss: 4.4221, grad_norm: 9.1358
2023-03-10 15:21:53,826 - mmdet - INFO - Epoch [1][700/4068]	lr: 1.000e-02, eta: 0:18:20, time: 0.322, data_time: 0.024, memory: 6174, loss_cls: 1.5276, loss_bbox: 0.9178, loss_mask: 0.7153, loss_centerness: 0.7106, loss: 3.8713, grad_norm: 6.9533
2023-03-10 15:21:57,091 - mmdet - INFO - Epoch [1][710/4068]	lr: 1.000e-02, eta: 0:18:17, time: 0.326, data_time: 0.026, memory: 6174, loss_cls: 1.7676, loss_bbox: 1.0616, loss_mask: 0.6394, loss_centerness: 0.6843, loss: 4.1529, grad_norm: 7.2217
2023-03-10 15:22:00,531 - mmdet - INFO - Epoch [1][720/4068]	lr: 1.000e-02, eta: 0:18:14, time: 0.344, data_time: 0.024, memory: 6174, loss_cls: 2.1797, loss_bbox: 0.9666, loss_mask: 0.5904, loss_centerness: 0.5921, loss: 4.3289, grad_norm: 6.3549
2023-03-10 15:22:03,769 - mmdet - INFO - Epoch [1][730/4068]	lr: 1.000e-02, eta: 0:18:11, time: 0.324, data_time: 0.024, memory: 6174, loss_cls: 2.0735, loss_bbox: 0.9898, loss_mask: 0.4559, loss_centerness: 0.5328, loss: 4.0520, grad_norm: 7.9463
2023-03-10 15:22:07,176 - mmdet - INFO - Epoch [1][740/4068]	lr: 1.000e-02, eta: 0:18:08, time: 0.341, data_time: 0.024, memory: 6174, loss_cls: 2.6587, loss_bbox: 1.2995, loss_mask: 0.6576, loss_centerness: 0.6696, loss: 5.2854, grad_norm: 6.7581
2023-03-10 15:22:10,422 - mmdet - INFO - Epoch [1][750/4068]	lr: 1.000e-02, eta: 0:18:05, time: 0.325, data_time: 0.026, memory: 6174, loss_cls: 1.8447, loss_bbox: 1.3273, loss_mask: 0.5892, loss_centerness: 0.6429, loss: 4.4041, grad_norm: 8.0122
2023-03-10 15:22:13,630 - mmdet - INFO - Epoch [1][760/4068]	lr: 1.000e-02, eta: 0:18:01, time: 0.321, data_time: 0.024, memory: 6174, loss_cls: 2.0341, loss_bbox: 1.0654, loss_mask: 0.5013, loss_centerness: 0.6116, loss: 4.2125, grad_norm: 7.4059
2023-03-10 15:22:16,848 - mmdet - INFO - Epoch [1][770/4068]	lr: 1.000e-02, eta: 0:17:58, time: 0.322, data_time: 0.025, memory: 6174, loss_cls: 1.8688, loss_bbox: 0.8305, loss_mask: 0.4571, loss_centerness: 0.5444, loss: 3.7008, grad_norm: 7.6982
2023-03-10 15:22:20,046 - mmdet - INFO - Epoch [1][780/4068]	lr: 1.000e-02, eta: 0:17:54, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 2.4449, loss_bbox: 1.3544, loss_mask: 0.5363, loss_centerness: 0.6425, loss: 4.9781, grad_norm: 7.8481
2023-03-10 15:22:23,318 - mmdet - INFO - Epoch [1][790/4068]	lr: 1.000e-02, eta: 0:17:51, time: 0.327, data_time: 0.024, memory: 6174, loss_cls: 2.2121, loss_bbox: 0.8423, loss_mask: 0.5873, loss_centerness: 0.5915, loss: 4.2331, grad_norm: 5.5250
2023-03-10 15:22:26,665 - mmdet - INFO - Epoch [1][800/4068]	lr: 1.000e-02, eta: 0:17:48, time: 0.335, data_time: 0.024, memory: 6174, loss_cls: 2.3806, loss_bbox: 1.4097, loss_mask: 0.8648, loss_centerness: 0.6579, loss: 5.3131, grad_norm: 6.6295
2023-03-10 15:22:30,023 - mmdet - INFO - Epoch [1][810/4068]	lr: 1.000e-02, eta: 0:17:45, time: 0.336, data_time: 0.026, memory: 6174, loss_cls: 1.9787, loss_bbox: 0.9628, loss_mask: 0.7127, loss_centerness: 0.6099, loss: 4.2641, grad_norm: 5.4055
2023-03-10 15:22:33,288 - mmdet - INFO - Epoch [1][820/4068]	lr: 1.000e-02, eta: 0:17:42, time: 0.326, data_time: 0.026, memory: 6174, loss_cls: 1.8606, loss_bbox: 1.1053, loss_mask: 0.7819, loss_centerness: 0.6678, loss: 4.4155, grad_norm: 5.5850
2023-03-10 15:22:36,684 - mmdet - INFO - Epoch [1][830/4068]	lr: 1.000e-02, eta: 0:17:39, time: 0.340, data_time: 0.025, memory: 6174, loss_cls: 2.0043, loss_bbox: 0.9303, loss_mask: 0.5562, loss_centerness: 0.6574, loss: 4.1482, grad_norm: 5.3963
2023-03-10 15:22:39,974 - mmdet - INFO - Epoch [1][840/4068]	lr: 1.000e-02, eta: 0:17:36, time: 0.329, data_time: 0.025, memory: 6174, loss_cls: 1.7882, loss_bbox: 0.7529, loss_mask: 0.5409, loss_centerness: 0.6059, loss: 3.6878, grad_norm: 5.2796
2023-03-10 15:22:43,270 - mmdet - INFO - Epoch [1][850/4068]	lr: 1.000e-02, eta: 0:17:33, time: 0.330, data_time: 0.029, memory: 6174, loss_cls: 2.0490, loss_bbox: 0.7552, loss_mask: 0.5254, loss_centerness: 0.6791, loss: 4.0088, grad_norm: 6.1170
2023-03-10 15:22:46,505 - mmdet - INFO - Epoch [1][860/4068]	lr: 1.000e-02, eta: 0:17:29, time: 0.323, data_time: 0.025, memory: 6174, loss_cls: 2.0389, loss_bbox: 0.9095, loss_mask: 0.5797, loss_centerness: 0.6720, loss: 4.2000, grad_norm: 5.4100
2023-03-10 15:22:49,736 - mmdet - INFO - Epoch [1][870/4068]	lr: 1.000e-02, eta: 0:17:26, time: 0.323, data_time: 0.024, memory: 6174, loss_cls: 2.0612, loss_bbox: 0.7911, loss_mask: 0.5272, loss_centerness: 0.6914, loss: 4.0709, grad_norm: 5.0725
2023-03-10 15:22:52,986 - mmdet - INFO - Epoch [1][880/4068]	lr: 1.000e-02, eta: 0:17:23, time: 0.325, data_time: 0.026, memory: 6174, loss_cls: 1.7052, loss_bbox: 0.8835, loss_mask: 0.5576, loss_centerness: 0.6684, loss: 3.8147, grad_norm: 5.4590
2023-03-10 15:22:56,237 - mmdet - INFO - Epoch [1][890/4068]	lr: 1.000e-02, eta: 0:17:19, time: 0.325, data_time: 0.028, memory: 6174, loss_cls: 1.9154, loss_bbox: 0.7257, loss_mask: 0.4411, loss_centerness: 0.6961, loss: 3.7783, grad_norm: 4.3783
2023-03-10 15:22:59,508 - mmdet - INFO - Epoch [1][900/4068]	lr: 1.000e-02, eta: 0:17:16, time: 0.327, data_time: 0.030, memory: 6174, loss_cls: 2.1392, loss_bbox: 0.7034, loss_mask: 0.4400, loss_centerness: 0.5975, loss: 3.8801, grad_norm: 5.1160
2023-03-10 15:23:02,757 - mmdet - INFO - Epoch [1][910/4068]	lr: 1.000e-02, eta: 0:17:13, time: 0.325, data_time: 0.027, memory: 6174, loss_cls: 2.5612, loss_bbox: 0.8171, loss_mask: 0.5003, loss_centerness: 0.6802, loss: 4.5587, grad_norm: 4.1048
2023-03-10 15:23:05,958 - mmdet - INFO - Epoch [1][920/4068]	lr: 1.000e-02, eta: 0:17:09, time: 0.320, data_time: 0.023, memory: 6174, loss_cls: 1.8812, loss_bbox: 0.6454, loss_mask: 0.5152, loss_centerness: 0.5923, loss: 3.6341, grad_norm: 3.6559
2023-03-10 15:23:09,188 - mmdet - INFO - Epoch [1][930/4068]	lr: 1.000e-02, eta: 0:17:06, time: 0.323, data_time: 0.026, memory: 6174, loss_cls: 1.8136, loss_bbox: 0.7930, loss_mask: 0.5944, loss_centerness: 0.6594, loss: 3.8604, grad_norm: 3.6109
2023-03-10 15:23:12,409 - mmdet - INFO - Epoch [1][940/4068]	lr: 1.000e-02, eta: 0:17:02, time: 0.322, data_time: 0.025, memory: 6174, loss_cls: 1.9688, loss_bbox: 0.8047, loss_mask: 0.5089, loss_centerness: 0.6640, loss: 3.9464, grad_norm: 4.6100
2023-03-10 15:23:15,670 - mmdet - INFO - Epoch [1][950/4068]	lr: 1.000e-02, eta: 0:16:59, time: 0.326, data_time: 0.024, memory: 6174, loss_cls: 1.7138, loss_bbox: 0.8033, loss_mask: 0.4794, loss_centerness: 0.6910, loss: 3.6874, grad_norm: 3.1692
2023-03-10 15:23:18,924 - mmdet - INFO - Epoch [1][960/4068]	lr: 1.000e-02, eta: 0:16:56, time: 0.325, data_time: 0.028, memory: 6174, loss_cls: 2.0422, loss_bbox: 0.7293, loss_mask: 0.4588, loss_centerness: 0.6099, loss: 3.8402, grad_norm: 5.2416
2023-03-10 15:23:22,166 - mmdet - INFO - Epoch [1][970/4068]	lr: 1.000e-02, eta: 0:16:52, time: 0.324, data_time: 0.026, memory: 6174, loss_cls: 1.7549, loss_bbox: 0.6839, loss_mask: 0.4430, loss_centerness: 0.6224, loss: 3.5042, grad_norm: 3.7366
2023-03-10 15:23:25,393 - mmdet - INFO - Epoch [1][980/4068]	lr: 1.000e-02, eta: 0:16:49, time: 0.323, data_time: 0.027, memory: 6174, loss_cls: 2.3412, loss_bbox: 0.6595, loss_mask: 0.4742, loss_centerness: 0.6016, loss: 4.0764, grad_norm: 5.4001
2023-03-10 15:23:28,626 - mmdet - INFO - Epoch [1][990/4068]	lr: 1.000e-02, eta: 0:16:45, time: 0.323, data_time: 0.026, memory: 6174, loss_cls: 2.1712, loss_bbox: 0.5513, loss_mask: 0.4152, loss_centerness: 0.5390, loss: 3.6767, grad_norm: 5.5025
2023-03-10 15:23:31,853 - mmdet - INFO - Exp name: polar_768_1x_r50_coco.py
2023-03-10 15:23:31,853 - mmdet - INFO - Epoch [1][1000/4068]	lr: 1.000e-02, eta: 0:16:42, time: 0.323, data_time: 0.026, memory: 6174, loss_cls: 2.4569, loss_bbox: 0.6290, loss_mask: 0.4654, loss_centerness: 0.6142, loss: 4.1655, grad_norm: 3.9838
2023-03-10 15:23:35,060 - mmdet - INFO - Epoch [1][1010/4068]	lr: 1.000e-02, eta: 0:16:39, time: 0.321, data_time: 0.024, memory: 6174, loss_cls: 1.9273, loss_bbox: 0.7447, loss_mask: 0.6126, loss_centerness: 0.6809, loss: 3.9655, grad_norm: 4.8941
2023-03-10 15:23:38,281 - mmdet - INFO - Epoch [1][1020/4068]	lr: 1.000e-02, eta: 0:16:35, time: 0.322, data_time: 0.025, memory: 6174, loss_cls: 1.7339, loss_bbox: 1.0181, loss_mask: 0.6229, loss_centerness: 0.6519, loss: 4.0268, grad_norm: 4.6791
2023-03-10 15:23:41,508 - mmdet - INFO - Epoch [1][1030/4068]	lr: 1.000e-02, eta: 0:16:32, time: 0.323, data_time: 0.025, memory: 6174, loss_cls: 1.9348, loss_bbox: 1.0626, loss_mask: 0.9853, loss_centerness: 0.6584, loss: 4.6411, grad_norm: 5.5393
2023-03-10 15:23:44,737 - mmdet - INFO - Epoch [1][1040/4068]	lr: 1.000e-02, eta: 0:16:28, time: 0.323, data_time: 0.025, memory: 6174, loss_cls: 2.1785, loss_bbox: 0.6902, loss_mask: 0.6929, loss_centerness: 0.5470, loss: 4.1085, grad_norm: 6.1230
