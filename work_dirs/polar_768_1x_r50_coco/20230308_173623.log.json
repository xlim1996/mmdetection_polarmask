{"env_info": "sys.platform: linux\nPython: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti\nCUDA_HOME: /home/ali/miniconda3/envs/mm-polar\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - Built with CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.2+e9cae2d", "config": "model = dict(\n    type='PolarMask',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='PolarMask_Head',\n        num_classes=4,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0.0,\n            ignore_iof_thr=-1,\n            gt_max_assign_all=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        neg_pos_ratio=3,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        iou_thr=0.5,\n        nms=dict(type='nms', iou_thr=0.5),\n        max_per_img=100))\ndataset_type = 'CocoSegDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        with_label=True),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n        meta_keys=('ori_shape', 'img_shape', 'pad_shape', 'scale_factor',\n                   'flip'))\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=False,\n        with_label=True),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=False,\n        with_label=False),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1280, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    imgs_per_gpu=4,\n    workers_per_gpu=5,\n    train=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                with_label=True),\n            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'],\n                meta_keys=('ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip'))\n        ]),\n    val=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=False,\n                with_label=True),\n            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=False,\n                with_label=False),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/polar_768_1x_r50_coco'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1113253378, "exp_name": "polar_768_1x_r50_coco.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.00345, "memory": 6174, "data_time": 0.26381, "loss_cls": 467.85425, "loss_bbox": 6.49647, "loss_mask": 4.31699, "loss_centerness": 0.7281, "loss": 479.39584, "grad_norm": 8386.15898, "time": 0.61463}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.00359, "memory": 6174, "data_time": 0.02444, "loss_cls": 6.6071, "loss_bbox": 3.83481, "loss_mask": 2.14198, "loss_centerness": 0.66325, "loss": 13.24715, "grad_norm": 283.28699, "time": 0.32341}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.00372, "memory": 6174, "data_time": 0.02447, "loss_cls": 3.13275, "loss_bbox": 4.15856, "loss_mask": 1.1995, "loss_centerness": 0.80405, "loss": 9.29486, "grad_norm": 65.92489, "time": 0.32314}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.00385, "memory": 6174, "data_time": 0.02355, "loss_cls": 8.09641, "loss_bbox": 5.77908, "loss_mask": 1.02297, "loss_centerness": 0.6867, "loss": 15.58516, "grad_norm": 317.01266, "time": 0.32192}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00399, "memory": 6174, "data_time": 0.02285, "loss_cls": 37.6436, "loss_bbox": 3.4559, "loss_mask": 0.8819, "loss_centerness": 0.67724, "loss": 42.65865, "grad_norm": 1738.91597, "time": 0.32206}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.00412, "memory": 6174, "data_time": 0.02313, "loss_cls": 5.8365, "loss_bbox": 3.27187, "loss_mask": 0.82883, "loss_centerness": 0.64351, "loss": 10.58071, "grad_norm": 146.69176, "time": 0.32503}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.00425, "memory": 6174, "data_time": 0.02745, "loss_cls": 4.50148, "loss_bbox": 2.87235, "loss_mask": 0.6789, "loss_centerness": 0.60424, "loss": 8.65698, "grad_norm": 54.26935, "time": 0.3242}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.00439, "memory": 6174, "data_time": 0.0259, "loss_cls": 4.79289, "loss_bbox": 3.09452, "loss_mask": 0.69361, "loss_centerness": 0.62386, "loss": 9.20488, "grad_norm": 49.16846, "time": 0.32653}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 0.00452, "memory": 6174, "data_time": 0.02505, "loss_cls": 6.89614, "loss_bbox": 3.12763, "loss_mask": 0.74686, "loss_centerness": 0.64195, "loss": 11.41258, "grad_norm": 84.83228, "time": 0.33307}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00465, "memory": 6174, "data_time": 0.02331, "loss_cls": 5.89171, "loss_bbox": 2.71418, "loss_mask": 0.78062, "loss_centerness": 0.86656, "loss": 10.25307, "grad_norm": 96.63436, "time": 0.33017}
{"mode": "train", "epoch": 1, "iter": 110, "lr": 0.00479, "memory": 6174, "data_time": 0.0287, "loss_cls": 4.79657, "loss_bbox": 2.2767, "loss_mask": 0.66214, "loss_centerness": 0.72091, "loss": 8.45631, "grad_norm": 58.56006, "time": 0.32947}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 0.00492, "memory": 6174, "data_time": 0.02579, "loss_cls": 3.16007, "loss_bbox": 2.50868, "loss_mask": 0.58183, "loss_centerness": 0.73473, "loss": 6.98531, "grad_norm": 18.92658, "time": 0.34327}
