{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti Laptop GPU\nCUDA_HOME: /home/xlim/anaconda3/envs/mm-polar\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - Built with CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.2+b8fb2bf", "config": "model = dict(\n    type='PolarMask',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='PolarMask_Head',\n        num_classes=4,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0.0,\n            ignore_iof_thr=-1,\n            gt_max_assign_all=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        neg_pos_ratio=3,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        iou_thr=0.5,\n        nms=dict(type='nms', iou_thr=0.5),\n        max_per_img=100))\ndataset_type = 'CocoSegDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        with_label=True),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1280, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    imgs_per_gpu=4,\n    workers_per_gpu=5,\n    train=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                with_label=True),\n            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=1)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/polar_768_1x_r50_coco'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1331483810, "exp_name": "polar_768_1x_r50_coco.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.00345, "memory": 6174, "data_time": 0.28596, "loss_cls": 309.26808, "loss_bbox": 3.67744, "loss_mask": 2.01682, "loss_centerness": 0.46795, "loss": 315.43028, "grad_norm": 4332.04265, "time": 0.89377}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.00359, "memory": 6174, "data_time": 0.04651, "loss_cls": 36.39406, "loss_bbox": 3.34163, "loss_mask": 2.17773, "loss_centerness": 0.57231, "loss": 42.48573, "grad_norm": 2647.96834, "time": 0.54739}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.00372, "memory": 6174, "data_time": 0.04064, "loss_cls": 229.57962, "loss_bbox": 2.64474, "loss_mask": 1.04253, "loss_centerness": 0.37736, "loss": 233.64425, "grad_norm": 8282.22437, "time": 0.54172}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.00385, "memory": 6174, "data_time": 0.03103, "loss_cls": 4.85967, "loss_bbox": 1.97394, "loss_mask": 0.82642, "loss_centerness": 0.42607, "loss": 8.0861, "grad_norm": 48.47236, "time": 0.53304}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00399, "memory": 6174, "data_time": 0.03425, "loss_cls": 28.39459, "loss_bbox": 1.43474, "loss_mask": 0.35722, "loss_centerness": 0.35805, "loss": 30.54462, "grad_norm": 1082.18667, "time": 0.53579}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.00412, "memory": 6174, "data_time": 0.03273, "loss_cls": 5.06331, "loss_bbox": 1.93078, "loss_mask": 0.49467, "loss_centerness": 0.62977, "loss": 8.11853, "grad_norm": 34.20746, "time": 0.53678}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.00425, "memory": 6174, "data_time": 0.0379, "loss_cls": 3.70511, "loss_bbox": 2.88399, "loss_mask": 0.68561, "loss_centerness": 0.56602, "loss": 7.84073, "grad_norm": 36.24199, "time": 0.54339}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.00439, "memory": 6174, "data_time": 0.02806, "loss_cls": 6.11261, "loss_bbox": 2.84693, "loss_mask": 0.73925, "loss_centerness": 0.34095, "loss": 10.03974, "grad_norm": 141.90311, "time": 0.53206}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 0.00452, "memory": 6174, "data_time": 0.02906, "loss_cls": 5.26046, "loss_bbox": 3.17989, "loss_mask": 0.66331, "loss_centerness": 0.34009, "loss": 9.44376, "grad_norm": 65.66005, "time": 0.53532}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00465, "memory": 6174, "data_time": 0.03072, "loss_cls": 10.65648, "loss_bbox": 3.86035, "loss_mask": 0.54767, "loss_centerness": 0.30935, "loss": 15.37385, "grad_norm": 284.32846, "time": 0.5368}
{"mode": "train", "epoch": 1, "iter": 110, "lr": 0.00479, "memory": 6174, "data_time": 0.02863, "loss_cls": 6.91465, "loss_bbox": 2.50121, "loss_mask": 0.40425, "loss_centerness": 0.44102, "loss": 10.26113, "grad_norm": 16.25495, "time": 0.53431}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 0.00492, "memory": 6174, "data_time": 0.02989, "loss_cls": 4.53044, "loss_bbox": 3.193, "loss_mask": 0.42295, "loss_centerness": 0.33959, "loss": 8.48597, "grad_norm": 14.40491, "time": 0.53635}
{"mode": "train", "epoch": 1, "iter": 130, "lr": 0.00505, "memory": 6174, "data_time": 0.0319, "loss_cls": 13.07435, "loss_bbox": 2.9903, "loss_mask": 0.51895, "loss_centerness": 0.48568, "loss": 17.06928, "grad_norm": 294.34119, "time": 0.53892}
{"mode": "train", "epoch": 1, "iter": 140, "lr": 0.00519, "memory": 6174, "data_time": 0.02885, "loss_cls": 10.69388, "loss_bbox": 3.81149, "loss_mask": 0.48167, "loss_centerness": 0.45303, "loss": 15.44007, "grad_norm": 116.18466, "time": 0.5357}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00532, "memory": 6174, "data_time": 0.03804, "loss_cls": 2.99989, "loss_bbox": 2.10287, "loss_mask": 0.36373, "loss_centerness": 0.30138, "loss": 5.76787, "grad_norm": 48.58106, "time": 0.54516}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 0.00545, "memory": 6174, "data_time": 0.03897, "loss_cls": 7.83442, "loss_bbox": 4.56982, "loss_mask": 0.62233, "loss_centerness": 0.48309, "loss": 13.50966, "grad_norm": 30.93738, "time": 0.54665}
{"mode": "train", "epoch": 1, "iter": 170, "lr": 0.00559, "memory": 6174, "data_time": 0.03185, "loss_cls": 2.62984, "loss_bbox": 3.80544, "loss_mask": 0.42949, "loss_centerness": 0.31146, "loss": 7.17623, "grad_norm": 15.91691, "time": 0.53832}
{"mode": "train", "epoch": 1, "iter": 180, "lr": 0.00572, "memory": 6174, "data_time": 0.03502, "loss_cls": 5.83034, "loss_bbox": 3.69732, "loss_mask": 0.5963, "loss_centerness": 0.41321, "loss": 10.53717, "grad_norm": 55.23293, "time": 0.542}
{"mode": "train", "epoch": 1, "iter": 190, "lr": 0.00585, "memory": 6174, "data_time": 0.0304, "loss_cls": 4.26723, "loss_bbox": 1.96314, "loss_mask": 0.33671, "loss_centerness": 0.29004, "loss": 6.85712, "grad_norm": 40.93653, "time": 0.53598}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00599, "memory": 6174, "data_time": 0.03341, "loss_cls": 2.73436, "loss_bbox": 2.3847, "loss_mask": 0.50889, "loss_centerness": 0.30353, "loss": 5.93148, "grad_norm": 17.77315, "time": 0.54016}
{"mode": "train", "epoch": 1, "iter": 210, "lr": 0.00612, "memory": 6174, "data_time": 0.03735, "loss_cls": 5.26975, "loss_bbox": 4.16427, "loss_mask": 0.57833, "loss_centerness": 0.31332, "loss": 10.32568, "grad_norm": 20.35865, "time": 0.54312}
{"mode": "train", "epoch": 1, "iter": 220, "lr": 0.00625, "memory": 6174, "data_time": 0.0327, "loss_cls": 4.19321, "loss_bbox": 2.93007, "loss_mask": 0.38525, "loss_centerness": 0.48261, "loss": 7.99115, "grad_norm": 68.01513, "time": 0.5383}
{"mode": "train", "epoch": 1, "iter": 230, "lr": 0.00639, "memory": 6174, "data_time": 0.03567, "loss_cls": 9.80539, "loss_bbox": 2.99415, "loss_mask": 0.77346, "loss_centerness": 0.56864, "loss": 14.14163, "grad_norm": 32.50352, "time": 0.54248}
{"mode": "train", "epoch": 1, "iter": 240, "lr": 0.00652, "memory": 6174, "data_time": 0.03243, "loss_cls": 6.91272, "loss_bbox": 2.64243, "loss_mask": 0.52951, "loss_centerness": 0.60315, "loss": 10.68781, "grad_norm": 21.33303, "time": 0.53773}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00665, "memory": 6174, "data_time": 0.03277, "loss_cls": 2.32595, "loss_bbox": 1.89555, "loss_mask": 0.28139, "loss_centerness": 0.15748, "loss": 4.66037, "grad_norm": 13.2509, "time": 0.53766}
{"mode": "train", "epoch": 1, "iter": 260, "lr": 0.00679, "memory": 6174, "data_time": 0.03247, "loss_cls": 3.18639, "loss_bbox": 2.43083, "loss_mask": 0.35176, "loss_centerness": 0.22287, "loss": 6.19185, "grad_norm": 18.50729, "time": 0.53904}
{"mode": "train", "epoch": 1, "iter": 270, "lr": 0.00692, "memory": 6174, "data_time": 0.04175, "loss_cls": 2.17891, "loss_bbox": 1.50657, "loss_mask": 0.31025, "loss_centerness": 0.20045, "loss": 4.19617, "grad_norm": 7.1666, "time": 0.54671}
{"mode": "train", "epoch": 1, "iter": 280, "lr": 0.00705, "memory": 6174, "data_time": 0.0352, "loss_cls": 8.60777, "loss_bbox": 4.00124, "loss_mask": 0.55053, "loss_centerness": 0.60197, "loss": 13.76151, "grad_norm": 71.74041, "time": 0.54141}
{"mode": "train", "epoch": 1, "iter": 290, "lr": 0.00719, "memory": 6174, "data_time": 0.02982, "loss_cls": 4.40461, "loss_bbox": 4.83618, "loss_mask": 0.56792, "loss_centerness": 0.51767, "loss": 10.32638, "grad_norm": 40.38243, "time": 0.53599}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00732, "memory": 6174, "data_time": 0.0292, "loss_cls": 2.03396, "loss_bbox": 3.21807, "loss_mask": 0.49093, "loss_centerness": 0.21812, "loss": 5.96109, "grad_norm": 8.8074, "time": 0.53381}
{"mode": "train", "epoch": 1, "iter": 310, "lr": 0.00745, "memory": 6174, "data_time": 0.0332, "loss_cls": 3.48325, "loss_bbox": 1.92173, "loss_mask": 0.72324, "loss_centerness": 0.40244, "loss": 6.53065, "grad_norm": 16.28088, "time": 0.53979}
{"mode": "train", "epoch": 1, "iter": 320, "lr": 0.00759, "memory": 6174, "data_time": 0.03103, "loss_cls": 3.94803, "loss_bbox": 2.92368, "loss_mask": 0.55958, "loss_centerness": 0.46283, "loss": 7.89413, "grad_norm": 14.27572, "time": 0.53711}
{"mode": "train", "epoch": 1, "iter": 330, "lr": 0.00772, "memory": 6174, "data_time": 0.03209, "loss_cls": 3.38204, "loss_bbox": 2.0871, "loss_mask": 0.49077, "loss_centerness": 0.41514, "loss": 6.37506, "grad_norm": 10.02794, "time": 0.53606}
{"mode": "train", "epoch": 1, "iter": 340, "lr": 0.00785, "memory": 6174, "data_time": 0.03537, "loss_cls": 1.96997, "loss_bbox": 2.94017, "loss_mask": 0.47854, "loss_centerness": 0.29386, "loss": 5.68254, "grad_norm": 8.08535, "time": 0.54081}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00799, "memory": 6174, "data_time": 0.03183, "loss_cls": 2.42576, "loss_bbox": 3.65714, "loss_mask": 0.61421, "loss_centerness": 0.46549, "loss": 7.1626, "grad_norm": 15.1602, "time": 0.53699}
{"mode": "train", "epoch": 1, "iter": 360, "lr": 0.00812, "memory": 6174, "data_time": 0.02821, "loss_cls": 1.13157, "loss_bbox": 1.78311, "loss_mask": 0.328, "loss_centerness": 0.17733, "loss": 3.42003, "grad_norm": 7.48206, "time": 0.53148}
{"mode": "train", "epoch": 1, "iter": 370, "lr": 0.00825, "memory": 6174, "data_time": 0.03477, "loss_cls": 3.80113, "loss_bbox": 4.42881, "loss_mask": 0.5713, "loss_centerness": 0.50141, "loss": 9.30266, "grad_norm": 12.36197, "time": 0.5408}
{"mode": "train", "epoch": 1, "iter": 380, "lr": 0.00839, "memory": 6174, "data_time": 0.03353, "loss_cls": 4.06701, "loss_bbox": 1.90948, "loss_mask": 0.27857, "loss_centerness": 0.29435, "loss": 6.54941, "grad_norm": 7.35329, "time": 0.53885}
{"mode": "train", "epoch": 1, "iter": 390, "lr": 0.00852, "memory": 6174, "data_time": 0.03625, "loss_cls": 3.44453, "loss_bbox": 1.28289, "loss_mask": 0.34482, "loss_centerness": 0.28879, "loss": 5.36103, "grad_norm": 12.65729, "time": 0.54076}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00865, "memory": 6174, "data_time": 0.02938, "loss_cls": 3.37406, "loss_bbox": 1.07531, "loss_mask": 0.27969, "loss_centerness": 0.21587, "loss": 4.94493, "grad_norm": 4.23746, "time": 0.53361}
{"mode": "train", "epoch": 1, "iter": 410, "lr": 0.00879, "memory": 6174, "data_time": 0.03677, "loss_cls": 2.39113, "loss_bbox": 2.99568, "loss_mask": 0.54598, "loss_centerness": 0.42744, "loss": 6.36023, "grad_norm": 9.14631, "time": 0.54212}
{"mode": "train", "epoch": 1, "iter": 420, "lr": 0.00892, "memory": 6174, "data_time": 0.04259, "loss_cls": 2.9103, "loss_bbox": 2.53869, "loss_mask": 0.54276, "loss_centerness": 0.50805, "loss": 6.4998, "grad_norm": 8.77287, "time": 0.54898}
{"mode": "train", "epoch": 1, "iter": 430, "lr": 0.00905, "memory": 6174, "data_time": 0.03058, "loss_cls": 2.21153, "loss_bbox": 1.95117, "loss_mask": 0.33286, "loss_centerness": 0.30077, "loss": 4.79632, "grad_norm": 6.02776, "time": 0.53507}
{"mode": "train", "epoch": 1, "iter": 440, "lr": 0.00919, "memory": 6174, "data_time": 0.03695, "loss_cls": 2.92944, "loss_bbox": 3.19327, "loss_mask": 0.54826, "loss_centerness": 0.41779, "loss": 7.08877, "grad_norm": 13.82511, "time": 0.54225}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00932, "memory": 6174, "data_time": 0.02934, "loss_cls": 2.64935, "loss_bbox": 3.38051, "loss_mask": 0.78338, "loss_centerness": 0.46855, "loss": 7.2818, "grad_norm": 12.86739, "time": 0.53393}
{"mode": "train", "epoch": 1, "iter": 460, "lr": 0.00945, "memory": 6174, "data_time": 0.03455, "loss_cls": 1.91981, "loss_bbox": 2.95025, "loss_mask": 0.69856, "loss_centerness": 0.33295, "loss": 5.90157, "grad_norm": 10.53065, "time": 0.53991}
{"mode": "train", "epoch": 1, "iter": 470, "lr": 0.00959, "memory": 6174, "data_time": 0.03805, "loss_cls": 2.14834, "loss_bbox": 3.25667, "loss_mask": 0.70206, "loss_centerness": 0.5455, "loss": 6.65257, "grad_norm": 12.43252, "time": 0.54332}
{"mode": "train", "epoch": 1, "iter": 480, "lr": 0.00972, "memory": 6174, "data_time": 0.03274, "loss_cls": 2.39026, "loss_bbox": 1.96979, "loss_mask": 0.61519, "loss_centerness": 0.32909, "loss": 5.30433, "grad_norm": 9.9044, "time": 0.53744}
{"mode": "train", "epoch": 1, "iter": 490, "lr": 0.00985, "memory": 6174, "data_time": 0.02986, "loss_cls": 1.67752, "loss_bbox": 4.72389, "loss_mask": 0.49338, "loss_centerness": 0.2766, "loss": 7.17139, "grad_norm": 6.99106, "time": 0.53557}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00999, "memory": 6174, "data_time": 0.04204, "loss_cls": 2.37076, "loss_bbox": 3.96646, "loss_mask": 0.58869, "loss_centerness": 0.38216, "loss": 7.30808, "grad_norm": 10.08437, "time": 0.54693}
{"mode": "train", "epoch": 1, "iter": 510, "lr": 0.01, "memory": 6174, "data_time": 0.03399, "loss_cls": 2.04231, "loss_bbox": 3.48086, "loss_mask": 0.42122, "loss_centerness": 0.29101, "loss": 6.23539, "grad_norm": 6.84601, "time": 0.53882}
{"mode": "train", "epoch": 1, "iter": 520, "lr": 0.01, "memory": 6174, "data_time": 0.03039, "loss_cls": 1.95619, "loss_bbox": 3.80013, "loss_mask": 0.45989, "loss_centerness": 0.26667, "loss": 6.48288, "grad_norm": 10.83364, "time": 0.53539}
{"mode": "train", "epoch": 1, "iter": 530, "lr": 0.01, "memory": 6174, "data_time": 0.03172, "loss_cls": 1.88853, "loss_bbox": 3.08376, "loss_mask": 0.3976, "loss_centerness": 0.39882, "loss": 5.76872, "grad_norm": 5.21414, "time": 0.53615}
{"mode": "train", "epoch": 1, "iter": 540, "lr": 0.01, "memory": 6174, "data_time": 0.03218, "loss_cls": 2.43291, "loss_bbox": 6.89078, "loss_mask": 0.5691, "loss_centerness": 0.47183, "loss": 10.36461, "grad_norm": 6.85672, "time": 0.53761}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 6174, "data_time": 0.03205, "loss_cls": 2.05516, "loss_bbox": 5.44458, "loss_mask": 0.47846, "loss_centerness": 0.43031, "loss": 8.4085, "grad_norm": NaN, "time": 0.53858}
{"mode": "train", "epoch": 1, "iter": 560, "lr": 0.01, "memory": 6174, "data_time": 0.03306, "loss_cls": NaN, "loss_bbox": NaN, "loss_mask": NaN, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.51794}
{"mode": "train", "epoch": 1, "iter": 570, "lr": 0.01, "memory": 6174, "data_time": 0.03516, "loss_cls": NaN, "loss_bbox": NaN, "loss_mask": NaN, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.52081}
{"mode": "train", "epoch": 1, "iter": 580, "lr": 0.01, "memory": 6174, "data_time": 0.03112, "loss_cls": NaN, "loss_bbox": NaN, "loss_mask": NaN, "loss_centerness": NaN, "loss": NaN, "grad_norm": NaN, "time": 0.51788}
