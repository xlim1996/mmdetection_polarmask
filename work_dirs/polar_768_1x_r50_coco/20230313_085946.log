2023-03-13 08:59:46,358 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3080 Ti Laptop GPU
CUDA_HOME: /home/xlim/anaconda3/envs/mm-polar
NVCC: Cuda compilation tools, release 11.7, V11.7.64
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - Built with CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.7
MMDetection: 2.28.2+b8fb2bf
------------------------------------------------------------

2023-03-13 08:59:46,505 - mmdet - INFO - Distributed training: False
2023-03-13 08:59:46,602 - mmdet - INFO - Config:
model = dict(
    type='PolarMask',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=5,
        relu_before_extra_convs=True),
    bbox_head=dict(
        type='PolarMask_Head',
        num_classes=4,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        strides=[8, 16, 32, 64, 128],
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='IoULoss', loss_weight=1.0),
        loss_centerness=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.4,
            min_pos_iou=0.0,
            ignore_iof_thr=-1,
            gt_max_assign_all=False),
        allowed_border=-1,
        pos_weight=-1,
        neg_pos_ratio=3,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        iou_thr=0.5,
        nms=dict(type='nms', iou_thr=0.5),
        max_per_img=100))
dataset_type = 'CocoSegDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        with_label=True),
    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1280, 768),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=False),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    imgs_per_gpu=4,
    workers_per_gpu=5,
    train=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_train2017.json',
        img_prefix='data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                with_label=True),
            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1280, 768),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1280, 768),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
optimizer = dict(
    type='SGD',
    lr=0.01,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=1)
checkpoint_config = dict(interval=1)
log_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/polar_768_1x_r50_coco'
auto_resume = False
gpu_ids = [0]

2023-03-13 08:59:46,602 - mmdet - INFO - Set random seed to 1331483810, deterministic: False
2023-03-13 08:59:46,792 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2023-03-13 08:59:46,853 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.polar_cls.weight - torch.Size([3, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_cls.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_reg.weight - torch.Size([4, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_reg.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_mask.weight - torch.Size([36, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_mask.bias - torch.Size([36]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_centerness.weight - torch.Size([1, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_centerness.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.scales_bbox.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  
2023-03-13 08:59:53,116 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-03-13 08:59:53,257 - mmdet - INFO - Start running, host: xlim@xlim, work_dir: /home/xlim/mmdetection_polarmask/work_dirs/polar_768_1x_r50_coco
2023-03-13 08:59:53,258 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-03-13 08:59:53,258 - mmdet - INFO - workflow: [('train', 1)], max: 1 epochs
2023-03-13 08:59:53,258 - mmdet - INFO - Checkpoints will be saved to /home/xlim/mmdetection_polarmask/work_dirs/polar_768_1x_r50_coco by HardDiskBackend.
2023-03-13 09:00:02,199 - mmdet - INFO - Epoch [1][10/17081]	lr: 3.453e-03, eta: 4:14:17, time: 0.894, data_time: 0.286, memory: 6174, loss_cls: 309.2681, loss_bbox: 3.6774, loss_mask: 2.0168, loss_centerness: 0.4679, loss: 315.4303, grad_norm: 4332.0427
2023-03-13 09:00:07,673 - mmdet - INFO - Epoch [1][20/17081]	lr: 3.587e-03, eta: 3:24:53, time: 0.547, data_time: 0.047, memory: 6174, loss_cls: 36.3941, loss_bbox: 3.3416, loss_mask: 2.1777, loss_centerness: 0.5723, loss: 42.4857, grad_norm: 2647.9683
2023-03-13 09:00:13,090 - mmdet - INFO - Epoch [1][30/17081]	lr: 3.720e-03, eta: 3:07:50, time: 0.542, data_time: 0.041, memory: 6174, loss_cls: 229.5796, loss_bbox: 2.6447, loss_mask: 1.0425, loss_centerness: 0.3774, loss: 233.6443, grad_norm: 8282.2244
2023-03-13 09:00:18,420 - mmdet - INFO - Epoch [1][40/17081]	lr: 3.853e-03, eta: 2:58:38, time: 0.533, data_time: 0.031, memory: 6174, loss_cls: 4.8597, loss_bbox: 1.9739, loss_mask: 0.8264, loss_centerness: 0.4261, loss: 8.0861, grad_norm: 48.4724
2023-03-13 09:00:23,778 - mmdet - INFO - Epoch [1][50/17081]	lr: 3.987e-03, eta: 2:53:14, time: 0.536, data_time: 0.034, memory: 6174, loss_cls: 28.3946, loss_bbox: 1.4347, loss_mask: 0.3572, loss_centerness: 0.3581, loss: 30.5446, grad_norm: 1082.1867
2023-03-13 09:00:29,146 - mmdet - INFO - Epoch [1][60/17081]	lr: 4.120e-03, eta: 2:49:39, time: 0.537, data_time: 0.033, memory: 6174, loss_cls: 5.0633, loss_bbox: 1.9308, loss_mask: 0.4947, loss_centerness: 0.6298, loss: 8.1185, grad_norm: 34.2075
2023-03-13 09:00:34,580 - mmdet - INFO - Epoch [1][70/17081]	lr: 4.253e-03, eta: 2:47:21, time: 0.543, data_time: 0.038, memory: 6174, loss_cls: 3.7051, loss_bbox: 2.8840, loss_mask: 0.6856, loss_centerness: 0.5660, loss: 7.8407, grad_norm: 36.2420
2023-03-13 09:00:39,901 - mmdet - INFO - Epoch [1][80/17081]	lr: 4.387e-03, eta: 2:45:11, time: 0.532, data_time: 0.028, memory: 6174, loss_cls: 6.1126, loss_bbox: 2.8469, loss_mask: 0.7392, loss_centerness: 0.3410, loss: 10.0397, grad_norm: 141.9031
2023-03-13 09:00:45,254 - mmdet - INFO - Epoch [1][90/17081]	lr: 4.520e-03, eta: 2:43:35, time: 0.535, data_time: 0.029, memory: 6174, loss_cls: 5.2605, loss_bbox: 3.1799, loss_mask: 0.6633, loss_centerness: 0.3401, loss: 9.4438, grad_norm: 65.6600
2023-03-13 09:00:50,622 - mmdet - INFO - Epoch [1][100/17081]	lr: 4.653e-03, eta: 2:42:20, time: 0.537, data_time: 0.031, memory: 6174, loss_cls: 10.6565, loss_bbox: 3.8604, loss_mask: 0.5477, loss_centerness: 0.3094, loss: 15.3739, grad_norm: 284.3285
2023-03-13 09:00:55,965 - mmdet - INFO - Epoch [1][110/17081]	lr: 4.787e-03, eta: 2:41:14, time: 0.534, data_time: 0.029, memory: 6174, loss_cls: 6.9146, loss_bbox: 2.5012, loss_mask: 0.4042, loss_centerness: 0.4410, loss: 10.2611, grad_norm: 16.2550
2023-03-13 09:01:01,329 - mmdet - INFO - Epoch [1][120/17081]	lr: 4.920e-03, eta: 2:40:20, time: 0.536, data_time: 0.030, memory: 6174, loss_cls: 4.5304, loss_bbox: 3.1930, loss_mask: 0.4229, loss_centerness: 0.3396, loss: 8.4860, grad_norm: 14.4049
2023-03-13 09:01:06,718 - mmdet - INFO - Epoch [1][130/17081]	lr: 5.053e-03, eta: 2:39:38, time: 0.539, data_time: 0.032, memory: 6174, loss_cls: 13.0744, loss_bbox: 2.9903, loss_mask: 0.5189, loss_centerness: 0.4857, loss: 17.0693, grad_norm: 294.3412
2023-03-13 09:01:12,075 - mmdet - INFO - Epoch [1][140/17081]	lr: 5.187e-03, eta: 2:38:56, time: 0.536, data_time: 0.029, memory: 6174, loss_cls: 10.6939, loss_bbox: 3.8115, loss_mask: 0.4817, loss_centerness: 0.4530, loss: 15.4401, grad_norm: 116.1847
2023-03-13 09:01:17,526 - mmdet - INFO - Epoch [1][150/17081]	lr: 5.320e-03, eta: 2:38:31, time: 0.545, data_time: 0.038, memory: 6174, loss_cls: 2.9999, loss_bbox: 2.1029, loss_mask: 0.3637, loss_centerness: 0.3014, loss: 5.7679, grad_norm: 48.5811
2023-03-13 09:01:22,993 - mmdet - INFO - Epoch [1][160/17081]	lr: 5.453e-03, eta: 2:38:09, time: 0.547, data_time: 0.039, memory: 6174, loss_cls: 7.8344, loss_bbox: 4.5698, loss_mask: 0.6223, loss_centerness: 0.4831, loss: 13.5097, grad_norm: 30.9374
2023-03-13 09:01:28,376 - mmdet - INFO - Epoch [1][170/17081]	lr: 5.587e-03, eta: 2:37:41, time: 0.538, data_time: 0.032, memory: 6174, loss_cls: 2.6298, loss_bbox: 3.8054, loss_mask: 0.4295, loss_centerness: 0.3115, loss: 7.1762, grad_norm: 15.9169
2023-03-13 09:01:33,796 - mmdet - INFO - Epoch [1][180/17081]	lr: 5.720e-03, eta: 2:37:19, time: 0.542, data_time: 0.035, memory: 6174, loss_cls: 5.8303, loss_bbox: 3.6973, loss_mask: 0.5963, loss_centerness: 0.4132, loss: 10.5372, grad_norm: 55.2329
2023-03-13 09:01:39,156 - mmdet - INFO - Epoch [1][190/17081]	lr: 5.853e-03, eta: 2:36:54, time: 0.536, data_time: 0.030, memory: 6174, loss_cls: 4.2672, loss_bbox: 1.9631, loss_mask: 0.3367, loss_centerness: 0.2900, loss: 6.8571, grad_norm: 40.9365
2023-03-13 09:01:44,558 - mmdet - INFO - Epoch [1][200/17081]	lr: 5.987e-03, eta: 2:36:33, time: 0.540, data_time: 0.033, memory: 6174, loss_cls: 2.7344, loss_bbox: 2.3847, loss_mask: 0.5089, loss_centerness: 0.3035, loss: 5.9315, grad_norm: 17.7732
2023-03-13 09:01:49,989 - mmdet - INFO - Epoch [1][210/17081]	lr: 6.120e-03, eta: 2:36:17, time: 0.543, data_time: 0.037, memory: 6174, loss_cls: 5.2698, loss_bbox: 4.1643, loss_mask: 0.5783, loss_centerness: 0.3133, loss: 10.3257, grad_norm: 20.3586
2023-03-13 09:01:55,372 - mmdet - INFO - Epoch [1][220/17081]	lr: 6.253e-03, eta: 2:35:58, time: 0.538, data_time: 0.033, memory: 6174, loss_cls: 4.1932, loss_bbox: 2.9301, loss_mask: 0.3853, loss_centerness: 0.4826, loss: 7.9911, grad_norm: 68.0151
2023-03-13 09:02:00,797 - mmdet - INFO - Epoch [1][230/17081]	lr: 6.387e-03, eta: 2:35:43, time: 0.542, data_time: 0.036, memory: 6174, loss_cls: 9.8054, loss_bbox: 2.9941, loss_mask: 0.7735, loss_centerness: 0.5686, loss: 14.1416, grad_norm: 32.5035
2023-03-13 09:02:06,174 - mmdet - INFO - Epoch [1][240/17081]	lr: 6.520e-03, eta: 2:35:26, time: 0.538, data_time: 0.032, memory: 6174, loss_cls: 6.9127, loss_bbox: 2.6424, loss_mask: 0.5295, loss_centerness: 0.6032, loss: 10.6878, grad_norm: 21.3330
2023-03-13 09:02:11,551 - mmdet - INFO - Epoch [1][250/17081]	lr: 6.653e-03, eta: 2:35:10, time: 0.538, data_time: 0.033, memory: 6174, loss_cls: 2.3259, loss_bbox: 1.8956, loss_mask: 0.2814, loss_centerness: 0.1575, loss: 4.6604, grad_norm: 13.2509
2023-03-13 09:02:16,941 - mmdet - INFO - Epoch [1][260/17081]	lr: 6.787e-03, eta: 2:34:55, time: 0.539, data_time: 0.032, memory: 6174, loss_cls: 3.1864, loss_bbox: 2.4308, loss_mask: 0.3518, loss_centerness: 0.2229, loss: 6.1918, grad_norm: 18.5073
2023-03-13 09:02:22,408 - mmdet - INFO - Epoch [1][270/17081]	lr: 6.920e-03, eta: 2:34:46, time: 0.547, data_time: 0.042, memory: 6174, loss_cls: 2.1789, loss_bbox: 1.5066, loss_mask: 0.3102, loss_centerness: 0.2004, loss: 4.1962, grad_norm: 7.1666
2023-03-13 09:02:27,822 - mmdet - INFO - Epoch [1][280/17081]	lr: 7.053e-03, eta: 2:34:34, time: 0.541, data_time: 0.035, memory: 6174, loss_cls: 8.6078, loss_bbox: 4.0012, loss_mask: 0.5505, loss_centerness: 0.6020, loss: 13.7615, grad_norm: 71.7404
2023-03-13 09:02:33,182 - mmdet - INFO - Epoch [1][290/17081]	lr: 7.187e-03, eta: 2:34:19, time: 0.536, data_time: 0.030, memory: 6174, loss_cls: 4.4046, loss_bbox: 4.8362, loss_mask: 0.5679, loss_centerness: 0.5177, loss: 10.3264, grad_norm: 40.3824
2023-03-13 09:02:38,520 - mmdet - INFO - Epoch [1][300/17081]	lr: 7.320e-03, eta: 2:34:04, time: 0.534, data_time: 0.029, memory: 6174, loss_cls: 2.0340, loss_bbox: 3.2181, loss_mask: 0.4909, loss_centerness: 0.2181, loss: 5.9611, grad_norm: 8.8074
2023-03-13 09:02:43,918 - mmdet - INFO - Epoch [1][310/17081]	lr: 7.453e-03, eta: 2:33:52, time: 0.540, data_time: 0.033, memory: 6174, loss_cls: 3.4832, loss_bbox: 1.9217, loss_mask: 0.7232, loss_centerness: 0.4024, loss: 6.5307, grad_norm: 16.2809
2023-03-13 09:02:49,289 - mmdet - INFO - Epoch [1][320/17081]	lr: 7.587e-03, eta: 2:33:39, time: 0.537, data_time: 0.031, memory: 6174, loss_cls: 3.9480, loss_bbox: 2.9237, loss_mask: 0.5596, loss_centerness: 0.4628, loss: 7.8941, grad_norm: 14.2757
2023-03-13 09:02:54,650 - mmdet - INFO - Epoch [1][330/17081]	lr: 7.720e-03, eta: 2:33:27, time: 0.536, data_time: 0.032, memory: 6174, loss_cls: 3.3820, loss_bbox: 2.0871, loss_mask: 0.4908, loss_centerness: 0.4151, loss: 6.3751, grad_norm: 10.0279
2023-03-13 09:03:00,058 - mmdet - INFO - Epoch [1][340/17081]	lr: 7.853e-03, eta: 2:33:17, time: 0.541, data_time: 0.035, memory: 6174, loss_cls: 1.9700, loss_bbox: 2.9402, loss_mask: 0.4785, loss_centerness: 0.2939, loss: 5.6825, grad_norm: 8.0853
2023-03-13 09:03:05,428 - mmdet - INFO - Epoch [1][350/17081]	lr: 7.987e-03, eta: 2:33:06, time: 0.537, data_time: 0.032, memory: 6174, loss_cls: 2.4258, loss_bbox: 3.6571, loss_mask: 0.6142, loss_centerness: 0.4655, loss: 7.1626, grad_norm: 15.1602
2023-03-13 09:03:10,743 - mmdet - INFO - Epoch [1][360/17081]	lr: 8.120e-03, eta: 2:32:52, time: 0.531, data_time: 0.028, memory: 6174, loss_cls: 1.1316, loss_bbox: 1.7831, loss_mask: 0.3280, loss_centerness: 0.1773, loss: 3.4200, grad_norm: 7.4821
2023-03-13 09:03:16,151 - mmdet - INFO - Epoch [1][370/17081]	lr: 8.253e-03, eta: 2:32:43, time: 0.541, data_time: 0.035, memory: 6174, loss_cls: 3.8011, loss_bbox: 4.4288, loss_mask: 0.5713, loss_centerness: 0.5014, loss: 9.3027, grad_norm: 12.3620
2023-03-13 09:03:21,539 - mmdet - INFO - Epoch [1][380/17081]	lr: 8.387e-03, eta: 2:32:33, time: 0.539, data_time: 0.034, memory: 6174, loss_cls: 4.0670, loss_bbox: 1.9095, loss_mask: 0.2786, loss_centerness: 0.2944, loss: 6.5494, grad_norm: 7.3533
2023-03-13 09:03:26,947 - mmdet - INFO - Epoch [1][390/17081]	lr: 8.520e-03, eta: 2:32:25, time: 0.541, data_time: 0.036, memory: 6174, loss_cls: 3.4445, loss_bbox: 1.2829, loss_mask: 0.3448, loss_centerness: 0.2888, loss: 5.3610, grad_norm: 12.6573
2023-03-13 09:03:32,283 - mmdet - INFO - Epoch [1][400/17081]	lr: 8.653e-03, eta: 2:32:13, time: 0.534, data_time: 0.029, memory: 6174, loss_cls: 3.3741, loss_bbox: 1.0753, loss_mask: 0.2797, loss_centerness: 0.2159, loss: 4.9449, grad_norm: 4.2375
2023-03-13 09:03:37,704 - mmdet - INFO - Epoch [1][410/17081]	lr: 8.787e-03, eta: 2:32:06, time: 0.542, data_time: 0.037, memory: 6174, loss_cls: 2.3911, loss_bbox: 2.9957, loss_mask: 0.5460, loss_centerness: 0.4274, loss: 6.3602, grad_norm: 9.1463
2023-03-13 09:03:43,194 - mmdet - INFO - Epoch [1][420/17081]	lr: 8.920e-03, eta: 2:32:01, time: 0.549, data_time: 0.043, memory: 6174, loss_cls: 2.9103, loss_bbox: 2.5387, loss_mask: 0.5428, loss_centerness: 0.5080, loss: 6.4998, grad_norm: 8.7729
2023-03-13 09:03:48,545 - mmdet - INFO - Epoch [1][430/17081]	lr: 9.053e-03, eta: 2:31:50, time: 0.535, data_time: 0.031, memory: 6174, loss_cls: 2.2115, loss_bbox: 1.9512, loss_mask: 0.3329, loss_centerness: 0.3008, loss: 4.7963, grad_norm: 6.0278
2023-03-13 09:03:53,967 - mmdet - INFO - Epoch [1][440/17081]	lr: 9.187e-03, eta: 2:31:43, time: 0.542, data_time: 0.037, memory: 6174, loss_cls: 2.9294, loss_bbox: 3.1933, loss_mask: 0.5483, loss_centerness: 0.4178, loss: 7.0888, grad_norm: 13.8251
2023-03-13 09:03:59,307 - mmdet - INFO - Epoch [1][450/17081]	lr: 9.320e-03, eta: 2:31:33, time: 0.534, data_time: 0.029, memory: 6174, loss_cls: 2.6494, loss_bbox: 3.3805, loss_mask: 0.7834, loss_centerness: 0.4686, loss: 7.2818, grad_norm: 12.8674
2023-03-13 09:04:04,706 - mmdet - INFO - Epoch [1][460/17081]	lr: 9.453e-03, eta: 2:31:25, time: 0.540, data_time: 0.035, memory: 6174, loss_cls: 1.9198, loss_bbox: 2.9502, loss_mask: 0.6986, loss_centerness: 0.3329, loss: 5.9016, grad_norm: 10.5307
2023-03-13 09:04:10,139 - mmdet - INFO - Epoch [1][470/17081]	lr: 9.587e-03, eta: 2:31:18, time: 0.543, data_time: 0.038, memory: 6174, loss_cls: 2.1483, loss_bbox: 3.2567, loss_mask: 0.7021, loss_centerness: 0.5455, loss: 6.6526, grad_norm: 12.4325
2023-03-13 09:04:15,514 - mmdet - INFO - Epoch [1][480/17081]	lr: 9.720e-03, eta: 2:31:10, time: 0.537, data_time: 0.033, memory: 6174, loss_cls: 2.3903, loss_bbox: 1.9698, loss_mask: 0.6152, loss_centerness: 0.3291, loss: 5.3043, grad_norm: 9.9044
2023-03-13 09:04:20,869 - mmdet - INFO - Epoch [1][490/17081]	lr: 9.853e-03, eta: 2:31:00, time: 0.536, data_time: 0.030, memory: 6174, loss_cls: 1.6775, loss_bbox: 4.7239, loss_mask: 0.4934, loss_centerness: 0.2766, loss: 7.1714, grad_norm: 6.9911
2023-03-13 09:04:26,339 - mmdet - INFO - Epoch [1][500/17081]	lr: 9.987e-03, eta: 2:30:55, time: 0.547, data_time: 0.042, memory: 6174, loss_cls: 2.3708, loss_bbox: 3.9665, loss_mask: 0.5887, loss_centerness: 0.3822, loss: 7.3081, grad_norm: 10.0844
2023-03-13 09:04:31,727 - mmdet - INFO - Epoch [1][510/17081]	lr: 1.000e-02, eta: 2:30:47, time: 0.539, data_time: 0.034, memory: 6174, loss_cls: 2.0423, loss_bbox: 3.4809, loss_mask: 0.4212, loss_centerness: 0.2910, loss: 6.2354, grad_norm: 6.8460
2023-03-13 09:04:37,081 - mmdet - INFO - Epoch [1][520/17081]	lr: 1.000e-02, eta: 2:30:39, time: 0.535, data_time: 0.030, memory: 6174, loss_cls: 1.9562, loss_bbox: 3.8001, loss_mask: 0.4599, loss_centerness: 0.2667, loss: 6.4829, grad_norm: 10.8336
2023-03-13 09:04:42,442 - mmdet - INFO - Epoch [1][530/17081]	lr: 1.000e-02, eta: 2:30:30, time: 0.536, data_time: 0.032, memory: 6174, loss_cls: 1.8885, loss_bbox: 3.0838, loss_mask: 0.3976, loss_centerness: 0.3988, loss: 5.7687, grad_norm: 5.2141
2023-03-13 09:04:47,818 - mmdet - INFO - Epoch [1][540/17081]	lr: 1.000e-02, eta: 2:30:22, time: 0.538, data_time: 0.032, memory: 6174, loss_cls: 2.4329, loss_bbox: 6.8908, loss_mask: 0.5691, loss_centerness: 0.4718, loss: 10.3646, grad_norm: 6.8567
2023-03-13 09:04:53,204 - mmdet - INFO - Epoch [1][550/17081]	lr: 1.000e-02, eta: 2:30:15, time: 0.539, data_time: 0.032, memory: 6174, loss_cls: 2.0552, loss_bbox: 5.4446, loss_mask: 0.4785, loss_centerness: 0.4303, loss: 8.4085, grad_norm: nan
2023-03-13 09:04:58,383 - mmdet - INFO - Epoch [1][560/17081]	lr: 1.000e-02, eta: 2:30:01, time: 0.518, data_time: 0.033, memory: 6174, loss_cls: nan, loss_bbox: nan, loss_mask: nan, loss_centerness: nan, loss: nan, grad_norm: nan
2023-03-13 09:05:03,592 - mmdet - INFO - Epoch [1][570/17081]	lr: 1.000e-02, eta: 2:29:49, time: 0.521, data_time: 0.035, memory: 6174, loss_cls: nan, loss_bbox: nan, loss_mask: nan, loss_centerness: nan, loss: nan, grad_norm: nan
2023-03-13 09:05:08,770 - mmdet - INFO - Epoch [1][580/17081]	lr: 1.000e-02, eta: 2:29:36, time: 0.518, data_time: 0.031, memory: 6174, loss_cls: nan, loss_bbox: nan, loss_mask: nan, loss_centerness: nan, loss: nan, grad_norm: nan
