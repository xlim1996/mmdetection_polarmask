{"env_info": "sys.platform: linux\nPython: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti\nCUDA_HOME: /home/ali/miniconda3/envs/mm-polar\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - Built with CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.2+e9cae2d", "config": "model = dict(\n    type='PolarMask',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='PolarMask_Head',\n        num_classes=4,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0.0,\n            ignore_iof_thr=-1,\n            gt_max_assign_all=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        neg_pos_ratio=3,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        iou_thr=0.5,\n        nms=dict(type='nms', iou_thr=0.5),\n        max_per_img=100))\ndataset_type = 'CocoSegDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        with_label=True),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1280, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    imgs_per_gpu=4,\n    workers_per_gpu=5,\n    train=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                with_label=True),\n            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=1)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/polar_768_1x_r50_coco'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 356263495, "exp_name": "polar_768_1x_r50_coco.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.00345, "memory": 6174, "data_time": 0.26769, "loss_cls": 275.06071, "loss_bbox": 6.42467, "loss_mask": 4.41814, "loss_centerness": 0.71175, "loss": 286.61527, "grad_norm": 3788.49042, "time": 0.63883}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.00359, "memory": 6174, "data_time": 0.02436, "loss_cls": 13.67409, "loss_bbox": 8.19497, "loss_mask": 1.88567, "loss_centerness": 0.70347, "loss": 24.45819, "grad_norm": 817.46169, "time": 0.33998}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.00372, "memory": 6174, "data_time": 0.02498, "loss_cls": 6.73174, "loss_bbox": 3.67153, "loss_mask": 1.11247, "loss_centerness": 0.59905, "loss": 12.11479, "grad_norm": 243.19009, "time": 0.34066}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.00385, "memory": 6174, "data_time": 0.02997, "loss_cls": 6.16026, "loss_bbox": 2.97465, "loss_mask": 0.76979, "loss_centerness": 0.7338, "loss": 10.63851, "grad_norm": 174.43897, "time": 0.34799}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00399, "memory": 6174, "data_time": 0.02809, "loss_cls": 7.4288, "loss_bbox": 2.87245, "loss_mask": 0.67204, "loss_centerness": 0.49328, "loss": 11.46657, "grad_norm": 274.56462, "time": 0.34408}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.00412, "memory": 6174, "data_time": 0.02414, "loss_cls": 4.38966, "loss_bbox": 4.29327, "loss_mask": 0.81929, "loss_centerness": 0.65129, "loss": 10.15351, "grad_norm": 40.65418, "time": 0.34093}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.00425, "memory": 6174, "data_time": 0.02395, "loss_cls": 2.99271, "loss_bbox": 3.2074, "loss_mask": 0.68707, "loss_centerness": 0.75447, "loss": 7.64164, "grad_norm": 27.14568, "time": 0.34144}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.00439, "memory": 6174, "data_time": 0.02494, "loss_cls": 2.21585, "loss_bbox": 2.54472, "loss_mask": 0.53819, "loss_centerness": 0.6131, "loss": 5.91186, "grad_norm": 21.62656, "time": 0.34218}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 0.00452, "memory": 6174, "data_time": 0.02464, "loss_cls": 3.34965, "loss_bbox": 3.18999, "loss_mask": 0.7663, "loss_centerness": 0.84682, "loss": 8.15276, "grad_norm": 27.69977, "time": 0.3423}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00465, "memory": 6174, "data_time": 0.02437, "loss_cls": 4.11008, "loss_bbox": 4.89382, "loss_mask": 0.77517, "loss_centerness": 0.71489, "loss": 10.49398, "grad_norm": 47.58919, "time": 0.34117}
{"mode": "train", "epoch": 1, "iter": 110, "lr": 0.00479, "memory": 6174, "data_time": 0.02507, "loss_cls": 3.61691, "loss_bbox": 2.82089, "loss_mask": 0.619, "loss_centerness": 0.5106, "loss": 7.56741, "grad_norm": 37.56221, "time": 0.34128}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 0.00492, "memory": 6174, "data_time": 0.02346, "loss_cls": 16.73867, "loss_bbox": 3.33766, "loss_mask": 0.6061, "loss_centerness": 0.69179, "loss": 21.37422, "grad_norm": 446.55272, "time": 0.3426}
{"mode": "train", "epoch": 1, "iter": 130, "lr": 0.00505, "memory": 6174, "data_time": 0.02381, "loss_cls": 49.99603, "loss_bbox": 3.42716, "loss_mask": 0.58895, "loss_centerness": 0.65494, "loss": 54.66708, "grad_norm": 1219.78084, "time": 0.34239}
{"mode": "train", "epoch": 1, "iter": 140, "lr": 0.00519, "memory": 6174, "data_time": 0.02429, "loss_cls": 6.0289, "loss_bbox": 5.46369, "loss_mask": 0.79063, "loss_centerness": 0.73611, "loss": 13.01934, "grad_norm": 33.93595, "time": 0.341}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00532, "memory": 6174, "data_time": 0.02314, "loss_cls": 4.39348, "loss_bbox": 2.61281, "loss_mask": 0.56939, "loss_centerness": 0.71521, "loss": 8.29089, "grad_norm": 39.67763, "time": 0.34037}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 0.00545, "memory": 6174, "data_time": 0.02409, "loss_cls": 11.00764, "loss_bbox": 2.81285, "loss_mask": 0.46366, "loss_centerness": 0.62854, "loss": 14.9127, "grad_norm": 265.1129, "time": 0.34187}
{"mode": "train", "epoch": 1, "iter": 170, "lr": 0.00559, "memory": 6174, "data_time": 0.02376, "loss_cls": 5.34708, "loss_bbox": 3.86795, "loss_mask": 0.66214, "loss_centerness": 0.72706, "loss": 10.60424, "grad_norm": 68.02816, "time": 0.34356}
{"mode": "train", "epoch": 1, "iter": 180, "lr": 0.00572, "memory": 6174, "data_time": 0.02409, "loss_cls": 8.2706, "loss_bbox": 2.93081, "loss_mask": 0.75621, "loss_centerness": 0.65797, "loss": 12.61559, "grad_norm": 134.186, "time": 0.34405}
