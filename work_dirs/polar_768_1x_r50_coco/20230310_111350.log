2023-03-10 11:13:50,947 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3080 Ti
CUDA_HOME: /home/ali/miniconda3/envs/mm-polar
NVCC: Cuda compilation tools, release 11.7, V11.7.64
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - Built with CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.5
MMCV CUDA Compiler: 11.7
MMDetection: 2.28.2+e9cae2d
------------------------------------------------------------

2023-03-10 11:13:51,107 - mmdet - INFO - Distributed training: False
2023-03-10 11:13:51,215 - mmdet - INFO - Config:
model = dict(
    type='PolarMask',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=5,
        relu_before_extra_convs=True),
    bbox_head=dict(
        type='PolarMask_Head',
        num_classes=4,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        strides=[8, 16, 32, 64, 128],
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='IoULoss', loss_weight=1.0),
        loss_centerness=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.4,
            min_pos_iou=0.0,
            ignore_iof_thr=-1,
            gt_max_assign_all=False),
        allowed_border=-1,
        pos_weight=-1,
        neg_pos_ratio=3,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        iou_thr=0.5,
        nms=dict(type='nms', iou_thr=0.5),
        max_per_img=100))
dataset_type = 'CocoSegDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        with_label=True),
    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1280, 768),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=False),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    imgs_per_gpu=4,
    workers_per_gpu=5,
    train=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_train2017.json',
        img_prefix='data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                with_label=True),
            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1280, 768),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoSegDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1280, 768),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
optimizer = dict(
    type='SGD',
    lr=0.01,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=1)
checkpoint_config = dict(interval=1)
log_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/polar_768_1x_r50_coco'
auto_resume = False
gpu_ids = [0]

2023-03-10 11:13:51,215 - mmdet - INFO - Set random seed to 70093689, deterministic: False
2023-03-10 11:13:51,402 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2023-03-10 11:13:51,462 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.cls_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.cls_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.reg_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.reg_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.mask_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.mask_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.polar_cls.weight - torch.Size([3, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_cls.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_reg.weight - torch.Size([4, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_reg.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_mask.weight - torch.Size([36, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_mask.bias - torch.Size([36]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_centerness.weight - torch.Size([1, 256, 3, 3]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.polar_centerness.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PolarMask_Head  

bbox_head.scales_bbox.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_bbox.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  

bbox_head.scales_mask.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of PolarMask  
2023-03-10 11:13:53,856 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-03-10 11:13:54,600 - mmdet - INFO - Start running, host: ali@Ohm, work_dir: /home/ali/mmdetection/work_dirs/polar_768_1x_r50_coco
2023-03-10 11:13:54,601 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-03-10 11:13:54,601 - mmdet - INFO - workflow: [('train', 1)], max: 1 epochs
2023-03-10 11:13:54,601 - mmdet - INFO - Checkpoints will be saved to /home/ali/mmdetection/work_dirs/polar_768_1x_r50_coco by HardDiskBackend.
2023-03-10 11:14:00,771 - mmdet - INFO - Epoch [1][10/4068]	lr: 3.453e-03, eta: 0:41:43, time: 0.617, data_time: 0.270, memory: 6174, loss_cls: 150.4633, loss_bbox: 5.5829, loss_mask: 3.8151, loss_centerness: 0.6683, loss: 160.5296, grad_norm: 2885.1171
2023-03-10 11:14:03,936 - mmdet - INFO - Epoch [1][20/4068]	lr: 3.587e-03, eta: 0:31:29, time: 0.317, data_time: 0.022, memory: 6174, loss_cls: 5.1524, loss_bbox: 4.7279, loss_mask: 2.4986, loss_centerness: 0.6881, loss: 13.0670, grad_norm: 94.7091
2023-03-10 11:14:07,116 - mmdet - INFO - Epoch [1][30/4068]	lr: 3.720e-03, eta: 0:28:04, time: 0.318, data_time: 0.024, memory: 6174, loss_cls: 4.9645, loss_bbox: 5.2493, loss_mask: 1.1071, loss_centerness: 0.6571, loss: 11.9779, grad_norm: 144.1950
2023-03-10 11:14:10,300 - mmdet - INFO - Epoch [1][40/4068]	lr: 3.853e-03, eta: 0:26:20, time: 0.318, data_time: 0.025, memory: 6174, loss_cls: 5.3574, loss_bbox: 3.6937, loss_mask: 0.8564, loss_centerness: 0.7566, loss: 10.6640, grad_norm: 110.4734
2023-03-10 11:14:13,481 - mmdet - INFO - Epoch [1][50/4068]	lr: 3.987e-03, eta: 0:25:17, time: 0.318, data_time: 0.023, memory: 6174, loss_cls: 22.7817, loss_bbox: 1.6869, loss_mask: 0.8583, loss_centerness: 0.4858, loss: 25.8127, grad_norm: 990.6886
2023-03-10 11:14:16,680 - mmdet - INFO - Epoch [1][60/4068]	lr: 4.120e-03, eta: 0:24:34, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 6.8495, loss_bbox: 2.2342, loss_mask: 0.7897, loss_centerness: 0.6217, loss: 10.4950, grad_norm: 99.2068
2023-03-10 11:14:19,895 - mmdet - INFO - Epoch [1][70/4068]	lr: 4.253e-03, eta: 0:24:04, time: 0.321, data_time: 0.025, memory: 6174, loss_cls: 4.8151, loss_bbox: 1.6674, loss_mask: 0.6953, loss_centerness: 0.6397, loss: 7.8174, grad_norm: 34.0376
2023-03-10 11:14:23,091 - mmdet - INFO - Epoch [1][80/4068]	lr: 4.387e-03, eta: 0:23:40, time: 0.320, data_time: 0.023, memory: 6174, loss_cls: 3.4945, loss_bbox: 1.7832, loss_mask: 0.6309, loss_centerness: 0.6837, loss: 6.5923, grad_norm: 39.9979
2023-03-10 11:14:26,292 - mmdet - INFO - Epoch [1][90/4068]	lr: 4.520e-03, eta: 0:23:20, time: 0.320, data_time: 0.023, memory: 6174, loss_cls: 3.3468, loss_bbox: 3.0455, loss_mask: 0.6092, loss_centerness: 0.7658, loss: 7.7673, grad_norm: 25.8946
2023-03-10 11:14:29,491 - mmdet - INFO - Epoch [1][100/4068]	lr: 4.653e-03, eta: 0:23:04, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 3.9016, loss_bbox: 2.8870, loss_mask: 0.6565, loss_centerness: 0.6615, loss: 8.1067, grad_norm: 48.6755
2023-03-10 11:14:32,703 - mmdet - INFO - Epoch [1][110/4068]	lr: 4.787e-03, eta: 0:22:50, time: 0.321, data_time: 0.026, memory: 6174, loss_cls: 4.4181, loss_bbox: 4.0051, loss_mask: 0.6583, loss_centerness: 0.5672, loss: 9.6487, grad_norm: 44.3103
2023-03-10 11:14:35,908 - mmdet - INFO - Epoch [1][120/4068]	lr: 4.920e-03, eta: 0:22:38, time: 0.320, data_time: 0.025, memory: 6174, loss_cls: 3.7856, loss_bbox: 4.0733, loss_mask: 0.7030, loss_centerness: 0.6901, loss: 9.2521, grad_norm: 32.9090
2023-03-10 11:14:39,107 - mmdet - INFO - Epoch [1][130/4068]	lr: 5.053e-03, eta: 0:22:28, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 2.7987, loss_bbox: 3.1164, loss_mask: 0.5797, loss_centerness: 0.6930, loss: 7.1878, grad_norm: 15.2122
2023-03-10 11:14:42,327 - mmdet - INFO - Epoch [1][140/4068]	lr: 5.187e-03, eta: 0:22:18, time: 0.322, data_time: 0.025, memory: 6174, loss_cls: 2.0376, loss_bbox: 4.4155, loss_mask: 0.4743, loss_centerness: 0.6161, loss: 7.5434, grad_norm: 20.2940
2023-03-10 11:14:45,520 - mmdet - INFO - Epoch [1][150/4068]	lr: 5.320e-03, eta: 0:22:09, time: 0.319, data_time: 0.023, memory: 6174, loss_cls: 3.6570, loss_bbox: 5.2678, loss_mask: 0.6173, loss_centerness: 0.5857, loss: 10.1278, grad_norm: 30.4003
2023-03-10 11:14:48,722 - mmdet - INFO - Epoch [1][160/4068]	lr: 5.453e-03, eta: 0:22:01, time: 0.320, data_time: 0.023, memory: 6174, loss_cls: 3.8719, loss_bbox: 4.5036, loss_mask: 0.5508, loss_centerness: 0.7178, loss: 9.6441, grad_norm: 23.4812
2023-03-10 11:14:51,909 - mmdet - INFO - Epoch [1][170/4068]	lr: 5.587e-03, eta: 0:21:54, time: 0.319, data_time: 0.023, memory: 6174, loss_cls: 2.9050, loss_bbox: 3.5610, loss_mask: 0.8575, loss_centerness: 0.5925, loss: 7.9160, grad_norm: 23.4957
2023-03-10 11:14:55,106 - mmdet - INFO - Epoch [1][180/4068]	lr: 5.720e-03, eta: 0:21:46, time: 0.320, data_time: 0.023, memory: 6174, loss_cls: 2.9996, loss_bbox: 3.0469, loss_mask: 0.6057, loss_centerness: 0.6001, loss: 7.2524, grad_norm: 16.0058
2023-03-10 11:14:58,293 - mmdet - INFO - Epoch [1][190/4068]	lr: 5.853e-03, eta: 0:21:39, time: 0.319, data_time: 0.022, memory: 6174, loss_cls: 3.0330, loss_bbox: 2.6525, loss_mask: 0.6166, loss_centerness: 0.6206, loss: 6.9227, grad_norm: 18.7834
2023-03-10 11:15:01,512 - mmdet - INFO - Epoch [1][200/4068]	lr: 5.987e-03, eta: 0:21:34, time: 0.322, data_time: 0.024, memory: 6174, loss_cls: 2.8678, loss_bbox: 2.6867, loss_mask: 0.5765, loss_centerness: 0.6972, loss: 6.8282, grad_norm: 14.8561
2023-03-10 11:15:04,742 - mmdet - INFO - Epoch [1][210/4068]	lr: 6.120e-03, eta: 0:21:28, time: 0.323, data_time: 0.025, memory: 6174, loss_cls: 3.5189, loss_bbox: 3.4531, loss_mask: 0.4678, loss_centerness: 0.6301, loss: 8.0699, grad_norm: 32.8074
2023-03-10 11:15:07,961 - mmdet - INFO - Epoch [1][220/4068]	lr: 6.253e-03, eta: 0:21:23, time: 0.322, data_time: 0.024, memory: 6174, loss_cls: 2.5591, loss_bbox: 3.4602, loss_mask: 0.4136, loss_centerness: 0.5586, loss: 6.9916, grad_norm: 12.7607
2023-03-10 11:15:11,180 - mmdet - INFO - Epoch [1][230/4068]	lr: 6.387e-03, eta: 0:21:17, time: 0.322, data_time: 0.024, memory: 6174, loss_cls: 3.0277, loss_bbox: 3.8327, loss_mask: 0.6678, loss_centerness: 0.6605, loss: 8.1887, grad_norm: 19.2618
2023-03-10 11:15:14,386 - mmdet - INFO - Epoch [1][240/4068]	lr: 6.520e-03, eta: 0:21:12, time: 0.321, data_time: 0.023, memory: 6174, loss_cls: 2.5215, loss_bbox: 2.7607, loss_mask: 0.6342, loss_centerness: 0.6647, loss: 6.5812, grad_norm: 12.2846
2023-03-10 11:15:17,602 - mmdet - INFO - Epoch [1][250/4068]	lr: 6.653e-03, eta: 0:21:07, time: 0.322, data_time: 0.025, memory: 6174, loss_cls: 4.2874, loss_bbox: 2.5985, loss_mask: 0.5563, loss_centerness: 0.5968, loss: 8.0390, grad_norm: 31.7140
2023-03-10 11:15:20,806 - mmdet - INFO - Epoch [1][260/4068]	lr: 6.787e-03, eta: 0:21:02, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 2.3937, loss_bbox: 2.7812, loss_mask: 0.4556, loss_centerness: 0.5937, loss: 6.2242, grad_norm: 15.3385
2023-03-10 11:15:24,022 - mmdet - INFO - Epoch [1][270/4068]	lr: 6.920e-03, eta: 0:20:57, time: 0.322, data_time: 0.025, memory: 6174, loss_cls: 3.4115, loss_bbox: 3.1673, loss_mask: 0.4887, loss_centerness: 0.6624, loss: 7.7299, grad_norm: 14.0678
2023-03-10 11:15:27,214 - mmdet - INFO - Epoch [1][280/4068]	lr: 7.053e-03, eta: 0:20:52, time: 0.319, data_time: 0.023, memory: 6174, loss_cls: 3.8666, loss_bbox: 2.8759, loss_mask: 0.4994, loss_centerness: 0.7005, loss: 7.9424, grad_norm: 13.0406
2023-03-10 11:15:30,426 - mmdet - INFO - Epoch [1][290/4068]	lr: 7.187e-03, eta: 0:20:48, time: 0.321, data_time: 0.024, memory: 6174, loss_cls: 3.1073, loss_bbox: 2.5321, loss_mask: 0.4680, loss_centerness: 0.6865, loss: 6.7939, grad_norm: 14.5158
2023-03-10 11:15:33,646 - mmdet - INFO - Epoch [1][300/4068]	lr: 7.320e-03, eta: 0:20:43, time: 0.322, data_time: 0.026, memory: 6174, loss_cls: 3.0759, loss_bbox: 1.3543, loss_mask: 0.4400, loss_centerness: 0.5977, loss: 5.4679, grad_norm: 13.1411
2023-03-10 11:15:36,871 - mmdet - INFO - Epoch [1][310/4068]	lr: 7.453e-03, eta: 0:20:39, time: 0.323, data_time: 0.026, memory: 6174, loss_cls: 2.5441, loss_bbox: 2.4093, loss_mask: 0.4880, loss_centerness: 0.5830, loss: 6.0244, grad_norm: 13.3697
2023-03-10 11:15:40,096 - mmdet - INFO - Epoch [1][320/4068]	lr: 7.587e-03, eta: 0:20:35, time: 0.323, data_time: 0.025, memory: 6174, loss_cls: 2.2854, loss_bbox: 1.9946, loss_mask: 0.8832, loss_centerness: 0.5625, loss: 5.7257, grad_norm: 9.7166
2023-03-10 11:15:43,311 - mmdet - INFO - Epoch [1][330/4068]	lr: 7.720e-03, eta: 0:20:31, time: 0.321, data_time: 0.025, memory: 6174, loss_cls: 2.4875, loss_bbox: 3.4061, loss_mask: 0.7554, loss_centerness: 0.6446, loss: 7.2936, grad_norm: 14.5271
2023-03-10 11:15:46,508 - mmdet - INFO - Epoch [1][340/4068]	lr: 7.853e-03, eta: 0:20:26, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 2.2888, loss_bbox: 3.2289, loss_mask: 0.7567, loss_centerness: 0.5870, loss: 6.8614, grad_norm: 10.6924
2023-03-10 11:15:49,741 - mmdet - INFO - Epoch [1][350/4068]	lr: 7.987e-03, eta: 0:20:23, time: 0.323, data_time: 0.027, memory: 6174, loss_cls: 2.8015, loss_bbox: 2.1930, loss_mask: 0.6187, loss_centerness: 0.6738, loss: 6.2870, grad_norm: 9.4769
2023-03-10 11:15:52,992 - mmdet - INFO - Epoch [1][360/4068]	lr: 8.120e-03, eta: 0:20:19, time: 0.325, data_time: 0.028, memory: 6174, loss_cls: 2.5222, loss_bbox: 1.9937, loss_mask: 0.5727, loss_centerness: 0.6847, loss: 5.7733, grad_norm: 9.1431
2023-03-10 11:15:56,249 - mmdet - INFO - Epoch [1][370/4068]	lr: 8.253e-03, eta: 0:20:15, time: 0.326, data_time: 0.029, memory: 6174, loss_cls: 2.7446, loss_bbox: 2.1987, loss_mask: 0.6327, loss_centerness: 0.6827, loss: 6.2587, grad_norm: 24.7516
2023-03-10 11:15:59,441 - mmdet - INFO - Epoch [1][380/4068]	lr: 8.387e-03, eta: 0:20:11, time: 0.319, data_time: 0.023, memory: 6174, loss_cls: 2.6400, loss_bbox: 1.9024, loss_mask: 0.5785, loss_centerness: 0.6720, loss: 5.7929, grad_norm: 10.3969
2023-03-10 11:16:02,619 - mmdet - INFO - Epoch [1][390/4068]	lr: 8.520e-03, eta: 0:20:07, time: 0.318, data_time: 0.022, memory: 6174, loss_cls: 2.7794, loss_bbox: 1.9389, loss_mask: 0.6284, loss_centerness: 0.7107, loss: 6.0575, grad_norm: 11.5261
2023-03-10 11:16:05,846 - mmdet - INFO - Epoch [1][400/4068]	lr: 8.653e-03, eta: 0:20:03, time: 0.323, data_time: 0.026, memory: 6174, loss_cls: 2.4153, loss_bbox: 1.4134, loss_mask: 0.5730, loss_centerness: 0.6865, loss: 5.0881, grad_norm: 8.2637
2023-03-10 11:16:09,037 - mmdet - INFO - Epoch [1][410/4068]	lr: 8.787e-03, eta: 0:19:59, time: 0.319, data_time: 0.023, memory: 6174, loss_cls: 2.7963, loss_bbox: 2.1635, loss_mask: 0.7638, loss_centerness: 0.6695, loss: 6.3931, grad_norm: 15.0675
2023-03-10 11:16:12,222 - mmdet - INFO - Epoch [1][420/4068]	lr: 8.920e-03, eta: 0:19:55, time: 0.318, data_time: 0.022, memory: 6174, loss_cls: 3.3773, loss_bbox: 1.7515, loss_mask: 0.6408, loss_centerness: 0.6749, loss: 6.4446, grad_norm: 13.8501
2023-03-10 11:16:15,413 - mmdet - INFO - Epoch [1][430/4068]	lr: 9.053e-03, eta: 0:19:51, time: 0.319, data_time: 0.022, memory: 6174, loss_cls: 2.3207, loss_bbox: 1.6256, loss_mask: 0.6378, loss_centerness: 0.6749, loss: 5.2590, grad_norm: 11.8569
2023-03-10 11:16:18,609 - mmdet - INFO - Epoch [1][440/4068]	lr: 9.187e-03, eta: 0:19:47, time: 0.320, data_time: 0.023, memory: 6174, loss_cls: 3.0330, loss_bbox: 2.1731, loss_mask: 0.6362, loss_centerness: 0.6451, loss: 6.4874, grad_norm: 11.9257
2023-03-10 11:16:21,814 - mmdet - INFO - Epoch [1][450/4068]	lr: 9.320e-03, eta: 0:19:43, time: 0.321, data_time: 0.024, memory: 6174, loss_cls: 2.2233, loss_bbox: 1.8111, loss_mask: 0.6232, loss_centerness: 0.5054, loss: 5.1630, grad_norm: 10.8571
2023-03-10 11:16:25,003 - mmdet - INFO - Epoch [1][460/4068]	lr: 9.453e-03, eta: 0:19:39, time: 0.319, data_time: 0.022, memory: 6174, loss_cls: 3.0769, loss_bbox: 2.8286, loss_mask: 0.7200, loss_centerness: 0.7190, loss: 7.3445, grad_norm: 10.9506
2023-03-10 11:16:28,218 - mmdet - INFO - Epoch [1][470/4068]	lr: 9.587e-03, eta: 0:19:35, time: 0.322, data_time: 0.025, memory: 6174, loss_cls: 2.9938, loss_bbox: 1.6407, loss_mask: 0.7049, loss_centerness: 0.6595, loss: 5.9989, grad_norm: 10.2032
2023-03-10 11:16:31,433 - mmdet - INFO - Epoch [1][480/4068]	lr: 9.720e-03, eta: 0:19:32, time: 0.321, data_time: 0.024, memory: 6174, loss_cls: 2.2112, loss_bbox: 2.1157, loss_mask: 0.6873, loss_centerness: 0.6740, loss: 5.6882, grad_norm: 8.7829
2023-03-10 11:16:34,619 - mmdet - INFO - Epoch [1][490/4068]	lr: 9.853e-03, eta: 0:19:28, time: 0.319, data_time: 0.023, memory: 6174, loss_cls: 1.6765, loss_bbox: 2.4401, loss_mask: 0.6386, loss_centerness: 0.6745, loss: 5.4297, grad_norm: 10.1100
2023-03-10 11:16:37,811 - mmdet - INFO - Epoch [1][500/4068]	lr: 9.987e-03, eta: 0:19:24, time: 0.319, data_time: 0.024, memory: 6174, loss_cls: 2.2437, loss_bbox: 1.8869, loss_mask: 0.4653, loss_centerness: 0.5367, loss: 5.1326, grad_norm: 8.5375
2023-03-10 11:16:41,013 - mmdet - INFO - Epoch [1][510/4068]	lr: 1.000e-02, eta: 0:19:20, time: 0.320, data_time: 0.024, memory: 6174, loss_cls: 2.2130, loss_bbox: 3.1410, loss_mask: 0.7149, loss_centerness: 0.6527, loss: 6.7215, grad_norm: 10.9359
2023-03-10 11:16:44,212 - mmdet - INFO - Epoch [1][520/4068]	lr: 1.000e-02, eta: 0:19:17, time: 0.320, data_time: 0.023, memory: 6174, loss_cls: 2.1820, loss_bbox: 4.2108, loss_mask: 0.8394, loss_centerness: 0.6294, loss: 7.8616, grad_norm: 9.6256
2023-03-10 11:16:47,449 - mmdet - INFO - Epoch [1][530/4068]	lr: 1.000e-02, eta: 0:19:13, time: 0.324, data_time: 0.027, memory: 6174, loss_cls: 2.2293, loss_bbox: 2.1286, loss_mask: 0.6715, loss_centerness: 0.5607, loss: 5.5901, grad_norm: 8.2538
2023-03-10 11:16:50,656 - mmdet - INFO - Epoch [1][540/4068]	lr: 1.000e-02, eta: 0:19:10, time: 0.321, data_time: 0.024, memory: 6174, loss_cls: 2.0561, loss_bbox: 1.8181, loss_mask: 0.8623, loss_centerness: 0.6738, loss: 5.4104, grad_norm: 8.3929
2023-03-10 11:16:53,876 - mmdet - INFO - Epoch [1][550/4068]	lr: 1.000e-02, eta: 0:19:06, time: 0.322, data_time: 0.023, memory: 6174, loss_cls: 2.1848, loss_bbox: 1.4311, loss_mask: 0.7426, loss_centerness: 0.6884, loss: 5.0469, grad_norm: 7.4033
2023-03-10 11:16:57,240 - mmdet - INFO - Epoch [1][560/4068]	lr: 1.000e-02, eta: 0:19:04, time: 0.336, data_time: 0.025, memory: 6174, loss_cls: 2.4890, loss_bbox: 1.6297, loss_mask: 0.7488, loss_centerness: 0.6723, loss: 5.5398, grad_norm: 8.8506
2023-03-10 11:17:00,551 - mmdet - INFO - Epoch [1][570/4068]	lr: 1.000e-02, eta: 0:19:01, time: 0.331, data_time: 0.024, memory: 6174, loss_cls: 2.0762, loss_bbox: 1.9849, loss_mask: 0.6283, loss_centerness: 0.6898, loss: 5.3792, grad_norm: 7.4391
2023-03-10 11:17:03,877 - mmdet - INFO - Epoch [1][580/4068]	lr: 1.000e-02, eta: 0:18:58, time: 0.333, data_time: 0.023, memory: 6174, loss_cls: 2.1822, loss_bbox: 2.5511, loss_mask: 0.5695, loss_centerness: 0.6171, loss: 5.9199, grad_norm: 12.8794
2023-03-10 11:17:07,171 - mmdet - INFO - Epoch [1][590/4068]	lr: 1.000e-02, eta: 0:18:55, time: 0.329, data_time: 0.025, memory: 6174, loss_cls: 2.1188, loss_bbox: 3.2482, loss_mask: 0.6432, loss_centerness: 0.6662, loss: 6.6763, grad_norm: 10.3390
2023-03-10 11:17:10,476 - mmdet - INFO - Epoch [1][600/4068]	lr: 1.000e-02, eta: 0:18:52, time: 0.330, data_time: 0.027, memory: 6174, loss_cls: 2.0139, loss_bbox: 1.6660, loss_mask: 0.5372, loss_centerness: 0.6916, loss: 4.9086, grad_norm: 7.4246
2023-03-10 11:17:13,768 - mmdet - INFO - Epoch [1][610/4068]	lr: 1.000e-02, eta: 0:18:49, time: 0.329, data_time: 0.022, memory: 6174, loss_cls: 2.1847, loss_bbox: 1.8665, loss_mask: 0.5659, loss_centerness: 0.6832, loss: 5.3004, grad_norm: 8.4068
2023-03-10 11:17:17,078 - mmdet - INFO - Epoch [1][620/4068]	lr: 1.000e-02, eta: 0:18:46, time: 0.331, data_time: 0.025, memory: 6174, loss_cls: 1.9221, loss_bbox: 1.0935, loss_mask: 0.6320, loss_centerness: 0.6860, loss: 4.3336, grad_norm: 6.2046
2023-03-10 11:17:20,306 - mmdet - INFO - Epoch [1][630/4068]	lr: 1.000e-02, eta: 0:18:42, time: 0.323, data_time: 0.024, memory: 6174, loss_cls: 1.9019, loss_bbox: 1.2504, loss_mask: 0.6474, loss_centerness: 0.6041, loss: 4.4038, grad_norm: 6.2543
2023-03-10 11:17:23,597 - mmdet - INFO - Epoch [1][640/4068]	lr: 1.000e-02, eta: 0:18:39, time: 0.329, data_time: 0.025, memory: 6174, loss_cls: 2.4571, loss_bbox: 1.0415, loss_mask: 0.6774, loss_centerness: 0.5237, loss: 4.6997, grad_norm: 8.5489
2023-03-10 11:17:26,904 - mmdet - INFO - Epoch [1][650/4068]	lr: 1.000e-02, eta: 0:18:36, time: 0.331, data_time: 0.024, memory: 6174, loss_cls: 3.6279, loss_bbox: 1.3430, loss_mask: 0.8317, loss_centerness: 0.6703, loss: 6.4728, grad_norm: 7.4366
2023-03-10 11:17:30,214 - mmdet - INFO - Epoch [1][660/4068]	lr: 1.000e-02, eta: 0:18:33, time: 0.331, data_time: 0.026, memory: 6174, loss_cls: 1.9956, loss_bbox: 1.1440, loss_mask: 0.6574, loss_centerness: 0.6155, loss: 4.4125, grad_norm: 6.8971
2023-03-10 11:17:33,566 - mmdet - INFO - Epoch [1][670/4068]	lr: 1.000e-02, eta: 0:18:30, time: 0.335, data_time: 0.026, memory: 6174, loss_cls: 2.3290, loss_bbox: 1.0545, loss_mask: 0.5611, loss_centerness: 0.6136, loss: 4.5581, grad_norm: 7.1774
2023-03-10 11:17:36,833 - mmdet - INFO - Epoch [1][680/4068]	lr: 1.000e-02, eta: 0:18:27, time: 0.327, data_time: 0.025, memory: 6174, loss_cls: 2.1761, loss_bbox: 1.1149, loss_mask: 0.9734, loss_centerness: 0.6110, loss: 4.8753, grad_norm: 6.8706
2023-03-10 11:17:40,056 - mmdet - INFO - Epoch [1][690/4068]	lr: 1.000e-02, eta: 0:18:23, time: 0.322, data_time: 0.024, memory: 6174, loss_cls: 2.2295, loss_bbox: 1.1092, loss_mask: 0.6753, loss_centerness: 0.6817, loss: 4.6957, grad_norm: 5.1807
2023-03-10 11:17:43,280 - mmdet - INFO - Epoch [1][700/4068]	lr: 1.000e-02, eta: 0:18:20, time: 0.322, data_time: 0.024, memory: 6174, loss_cls: 2.0895, loss_bbox: 0.9283, loss_mask: 0.5792, loss_centerness: 0.6036, loss: 4.2005, grad_norm: 5.8002
2023-03-10 11:17:46,506 - mmdet - INFO - Epoch [1][710/4068]	lr: 1.000e-02, eta: 0:18:16, time: 0.323, data_time: 0.024, memory: 6174, loss_cls: 2.0929, loss_bbox: 1.2103, loss_mask: 0.7958, loss_centerness: 0.6610, loss: 4.7600, grad_norm: 5.7504
2023-03-10 11:17:49,734 - mmdet - INFO - Epoch [1][720/4068]	lr: 1.000e-02, eta: 0:18:13, time: 0.323, data_time: 0.025, memory: 6174, loss_cls: 1.8935, loss_bbox: 0.9925, loss_mask: 0.8434, loss_centerness: 0.6843, loss: 4.4136, grad_norm: 4.3745
2023-03-10 11:17:52,966 - mmdet - INFO - Epoch [1][730/4068]	lr: 1.000e-02, eta: 0:18:09, time: 0.323, data_time: 0.024, memory: 6174, loss_cls: 1.8194, loss_bbox: 0.9672, loss_mask: 0.8819, loss_centerness: 0.6762, loss: 4.3447, grad_norm: 4.6092
2023-03-10 11:17:56,204 - mmdet - INFO - Epoch [1][740/4068]	lr: 1.000e-02, eta: 0:18:06, time: 0.324, data_time: 0.024, memory: 6174, loss_cls: 1.9908, loss_bbox: 0.8836, loss_mask: 0.7802, loss_centerness: 0.6045, loss: 4.2591, grad_norm: 4.2497
2023-03-10 11:17:59,487 - mmdet - INFO - Epoch [1][750/4068]	lr: 1.000e-02, eta: 0:18:03, time: 0.328, data_time: 0.024, memory: 6174, loss_cls: 2.0033, loss_bbox: 0.9060, loss_mask: 0.7167, loss_centerness: 0.6404, loss: 4.2664, grad_norm: 4.2249
2023-03-10 11:18:02,797 - mmdet - INFO - Epoch [1][760/4068]	lr: 1.000e-02, eta: 0:18:00, time: 0.331, data_time: 0.026, memory: 6174, loss_cls: 1.7644, loss_bbox: 0.7157, loss_mask: 0.6249, loss_centerness: 0.6900, loss: 3.7951, grad_norm: 3.7367
2023-03-10 11:18:06,023 - mmdet - INFO - Epoch [1][770/4068]	lr: 1.000e-02, eta: 0:17:56, time: 0.323, data_time: 0.023, memory: 6174, loss_cls: 1.6213, loss_bbox: 0.7429, loss_mask: 0.6427, loss_centerness: 0.6660, loss: 3.6729, grad_norm: 4.1277
2023-03-10 11:18:09,266 - mmdet - INFO - Epoch [1][780/4068]	lr: 1.000e-02, eta: 0:17:53, time: 0.324, data_time: 0.025, memory: 6174, loss_cls: 1.9963, loss_bbox: 0.8053, loss_mask: 0.5845, loss_centerness: 0.6826, loss: 4.0687, grad_norm: 4.3869
2023-03-10 11:18:12,502 - mmdet - INFO - Epoch [1][790/4068]	lr: 1.000e-02, eta: 0:17:50, time: 0.324, data_time: 0.025, memory: 6174, loss_cls: 1.9936, loss_bbox: 0.9365, loss_mask: 0.5775, loss_centerness: 0.6481, loss: 4.1557, grad_norm: 3.9893
2023-03-10 11:18:15,718 - mmdet - INFO - Epoch [1][800/4068]	lr: 1.000e-02, eta: 0:17:46, time: 0.322, data_time: 0.023, memory: 6174, loss_cls: 1.8594, loss_bbox: 0.9813, loss_mask: 0.5652, loss_centerness: 0.6636, loss: 4.0695, grad_norm: 4.6253
2023-03-10 11:18:18,943 - mmdet - INFO - Epoch [1][810/4068]	lr: 1.000e-02, eta: 0:17:43, time: 0.322, data_time: 0.024, memory: 6174, loss_cls: 1.8992, loss_bbox: 1.0636, loss_mask: 0.5659, loss_centerness: 0.6882, loss: 4.2168, grad_norm: 4.7932
2023-03-10 11:18:22,182 - mmdet - INFO - Epoch [1][820/4068]	lr: 1.000e-02, eta: 0:17:39, time: 0.324, data_time: 0.025, memory: 6174, loss_cls: 2.0276, loss_bbox: 0.7892, loss_mask: 0.6105, loss_centerness: 0.5509, loss: 3.9781, grad_norm: 5.9166
2023-03-10 11:18:25,417 - mmdet - INFO - Epoch [1][830/4068]	lr: 1.000e-02, eta: 0:17:36, time: 0.324, data_time: 0.026, memory: 6174, loss_cls: 2.5638, loss_bbox: 0.7667, loss_mask: 0.6027, loss_centerness: 0.6074, loss: 4.5407, grad_norm: 4.3423
2023-03-10 11:18:28,754 - mmdet - INFO - Epoch [1][840/4068]	lr: 1.000e-02, eta: 0:17:33, time: 0.334, data_time: 0.026, memory: 6174, loss_cls: 2.4116, loss_bbox: 0.8081, loss_mask: 0.5997, loss_centerness: 0.6838, loss: 4.5032, grad_norm: 4.5108
2023-03-10 11:18:31,970 - mmdet - INFO - Epoch [1][850/4068]	lr: 1.000e-02, eta: 0:17:30, time: 0.322, data_time: 0.023, memory: 6174, loss_cls: 2.4081, loss_bbox: 0.7257, loss_mask: 0.5023, loss_centerness: 0.5761, loss: 4.2122, grad_norm: 4.0136
2023-03-10 11:18:35,224 - mmdet - INFO - Epoch [1][860/4068]	lr: 1.000e-02, eta: 0:17:26, time: 0.325, data_time: 0.028, memory: 6174, loss_cls: 2.7961, loss_bbox: 0.8220, loss_mask: 0.5784, loss_centerness: 0.6906, loss: 4.8871, grad_norm: 5.9126
2023-03-10 11:18:38,456 - mmdet - INFO - Epoch [1][870/4068]	lr: 1.000e-02, eta: 0:17:23, time: 0.323, data_time: 0.026, memory: 6174, loss_cls: 2.0703, loss_bbox: 0.8634, loss_mask: 0.5589, loss_centerness: 0.6726, loss: 4.1652, grad_norm: 3.9328
2023-03-10 11:18:41,666 - mmdet - INFO - Epoch [1][880/4068]	lr: 1.000e-02, eta: 0:17:19, time: 0.321, data_time: 0.024, memory: 6174, loss_cls: 2.1662, loss_bbox: 0.9184, loss_mask: 0.6576, loss_centerness: 0.6851, loss: 4.4274, grad_norm: 4.3060
2023-03-10 11:18:44,882 - mmdet - INFO - Epoch [1][890/4068]	lr: 1.000e-02, eta: 0:17:16, time: 0.322, data_time: 0.024, memory: 6174, loss_cls: 2.0251, loss_bbox: 0.8179, loss_mask: 0.7035, loss_centerness: 0.5918, loss: 4.1384, grad_norm: 5.1539
2023-03-10 11:18:48,098 - mmdet - INFO - Epoch [1][900/4068]	lr: 1.000e-02, eta: 0:17:13, time: 0.322, data_time: 0.025, memory: 6174, loss_cls: 2.3898, loss_bbox: 0.9417, loss_mask: 0.8019, loss_centerness: 0.6899, loss: 4.8233, grad_norm: 5.0131
2023-03-10 11:18:51,318 - mmdet - INFO - Epoch [1][910/4068]	lr: 1.000e-02, eta: 0:17:09, time: 0.322, data_time: 0.025, memory: 6174, loss_cls: 2.1872, loss_bbox: 0.6844, loss_mask: 0.6717, loss_centerness: 0.5970, loss: 4.1403, grad_norm: 5.0336
2023-03-10 11:18:54,515 - mmdet - INFO - Epoch [1][920/4068]	lr: 1.000e-02, eta: 0:17:06, time: 0.320, data_time: 0.023, memory: 6174, loss_cls: 2.3890, loss_bbox: 0.7769, loss_mask: 0.6046, loss_centerness: 0.6663, loss: 4.4368, grad_norm: 3.7324
2023-03-10 11:18:57,806 - mmdet - INFO - Epoch [1][930/4068]	lr: 1.000e-02, eta: 0:17:03, time: 0.329, data_time: 0.024, memory: 6174, loss_cls: 1.9385, loss_bbox: 0.8010, loss_mask: 0.5271, loss_centerness: 0.7059, loss: 3.9725, grad_norm: 4.3262
2023-03-10 11:19:01,162 - mmdet - INFO - Epoch [1][940/4068]	lr: 1.000e-02, eta: 0:17:00, time: 0.336, data_time: 0.024, memory: 6174, loss_cls: 1.9176, loss_bbox: 0.8807, loss_mask: 0.5843, loss_centerness: 0.6796, loss: 4.0621, grad_norm: 4.1219
2023-03-10 11:19:04,461 - mmdet - INFO - Epoch [1][950/4068]	lr: 1.000e-02, eta: 0:16:56, time: 0.330, data_time: 0.022, memory: 6174, loss_cls: 1.8261, loss_bbox: 0.8348, loss_mask: 0.7361, loss_centerness: 0.6634, loss: 4.0604, grad_norm: 4.7451
2023-03-10 11:19:07,836 - mmdet - INFO - Epoch [1][960/4068]	lr: 1.000e-02, eta: 0:16:54, time: 0.338, data_time: 0.024, memory: 6174, loss_cls: 2.2413, loss_bbox: 0.7002, loss_mask: 0.6135, loss_centerness: 0.5988, loss: 4.1539, grad_norm: 5.2427
2023-03-10 11:19:11,196 - mmdet - INFO - Epoch [1][970/4068]	lr: 1.000e-02, eta: 0:16:51, time: 0.336, data_time: 0.027, memory: 6174, loss_cls: 2.4650, loss_bbox: 0.8346, loss_mask: 0.7074, loss_centerness: 0.5322, loss: 4.5392, grad_norm: 5.3998
2023-03-10 11:19:14,491 - mmdet - INFO - Epoch [1][980/4068]	lr: 1.000e-02, eta: 0:16:47, time: 0.330, data_time: 0.027, memory: 6174, loss_cls: 2.1730, loss_bbox: 0.8058, loss_mask: 0.6274, loss_centerness: 0.6108, loss: 4.2170, grad_norm: 5.4201
2023-03-10 11:19:17,796 - mmdet - INFO - Epoch [1][990/4068]	lr: 1.000e-02, eta: 0:16:44, time: 0.330, data_time: 0.026, memory: 6174, loss_cls: 2.0038, loss_bbox: 0.7478, loss_mask: 0.6174, loss_centerness: 0.6655, loss: 4.0345, grad_norm: 4.1392
2023-03-10 11:19:21,027 - mmdet - INFO - Exp name: polar_768_1x_r50_coco.py
2023-03-10 11:19:21,027 - mmdet - INFO - Epoch [1][1000/4068]	lr: 1.000e-02, eta: 0:16:41, time: 0.323, data_time: 0.024, memory: 6174, loss_cls: 2.9135, loss_bbox: 0.9079, loss_mask: 0.6831, loss_centerness: 0.5843, loss: 5.0888, grad_norm: 7.0337
2023-03-10 11:19:24,275 - mmdet - INFO - Epoch [1][1010/4068]	lr: 1.000e-02, eta: 0:16:38, time: 0.325, data_time: 0.024, memory: 6174, loss_cls: 2.9734, loss_bbox: 0.8535, loss_mask: 0.6018, loss_centerness: 0.6391, loss: 5.0678, grad_norm: 5.0417
2023-03-10 11:19:27,517 - mmdet - INFO - Epoch [1][1020/4068]	lr: 1.000e-02, eta: 0:16:34, time: 0.324, data_time: 0.025, memory: 6174, loss_cls: 1.8967, loss_bbox: 0.7201, loss_mask: 0.5074, loss_centerness: 0.6181, loss: 3.7423, grad_norm: 3.6134
2023-03-10 11:19:30,966 - mmdet - INFO - Epoch [1][1030/4068]	lr: 1.000e-02, eta: 0:16:32, time: 0.345, data_time: 0.027, memory: 6174, loss_cls: 2.2073, loss_bbox: 0.8069, loss_mask: 0.4854, loss_centerness: 0.6258, loss: 4.1253, grad_norm: 4.4541
2023-03-10 11:19:34,202 - mmdet - INFO - Epoch [1][1040/4068]	lr: 1.000e-02, eta: 0:16:28, time: 0.324, data_time: 0.024, memory: 6174, loss_cls: 2.4660, loss_bbox: 1.1192, loss_mask: 0.6487, loss_centerness: 0.6671, loss: 4.9010, grad_norm: 4.8856
2023-03-10 11:19:37,427 - mmdet - INFO - Epoch [1][1050/4068]	lr: 1.000e-02, eta: 0:16:25, time: 0.323, data_time: 0.024, memory: 6174, loss_cls: 1.9451, loss_bbox: 1.1866, loss_mask: 0.6863, loss_centerness: 0.6746, loss: 4.4926, grad_norm: 4.5624
2023-03-10 11:19:40,828 - mmdet - INFO - Epoch [1][1060/4068]	lr: 1.000e-02, eta: 0:16:22, time: 0.340, data_time: 0.026, memory: 6174, loss_cls: 2.0789, loss_bbox: 0.7008, loss_mask: 0.6034, loss_centerness: 0.5699, loss: 3.9531, grad_norm: 6.0460
2023-03-10 11:19:44,272 - mmdet - INFO - Epoch [1][1070/4068]	lr: 1.000e-02, eta: 0:16:19, time: 0.344, data_time: 0.024, memory: 6174, loss_cls: 2.5807, loss_bbox: 0.9217, loss_mask: 0.7746, loss_centerness: 0.6899, loss: 4.9669, grad_norm: 4.0534
2023-03-10 11:19:47,519 - mmdet - INFO - Epoch [1][1080/4068]	lr: 1.000e-02, eta: 0:16:16, time: 0.325, data_time: 0.024, memory: 6174, loss_cls: 2.5780, loss_bbox: 0.7608, loss_mask: 0.6498, loss_centerness: 0.5843, loss: 4.5730, grad_norm: 5.2390
2023-03-10 11:19:50,954 - mmdet - INFO - Epoch [1][1090/4068]	lr: 1.000e-02, eta: 0:16:13, time: 0.344, data_time: 0.025, memory: 6174, loss_cls: 2.8623, loss_bbox: 0.8382, loss_mask: 0.5661, loss_centerness: 0.6754, loss: 4.9421, grad_norm: 3.4731
2023-03-10 11:19:54,390 - mmdet - INFO - Epoch [1][1100/4068]	lr: 1.000e-02, eta: 0:16:10, time: 0.344, data_time: 0.024, memory: 6174, loss_cls: 2.2575, loss_bbox: 0.6852, loss_mask: 0.4851, loss_centerness: 0.6076, loss: 4.0354, grad_norm: 4.3001
2023-03-10 11:19:57,699 - mmdet - INFO - Epoch [1][1110/4068]	lr: 1.000e-02, eta: 0:16:07, time: 0.331, data_time: 0.022, memory: 6174, loss_cls: 2.2946, loss_bbox: 0.8294, loss_mask: 0.5057, loss_centerness: 0.6577, loss: 4.2874, grad_norm: 3.5978
2023-03-10 11:20:00,957 - mmdet - INFO - Epoch [1][1120/4068]	lr: 1.000e-02, eta: 0:16:04, time: 0.326, data_time: 0.025, memory: 6174, loss_cls: 2.0335, loss_bbox: 1.0541, loss_mask: 0.7515, loss_centerness: 0.6759, loss: 4.5151, grad_norm: 4.1743
2023-03-10 11:20:04,224 - mmdet - INFO - Epoch [1][1130/4068]	lr: 1.000e-02, eta: 0:16:01, time: 0.327, data_time: 0.026, memory: 6174, loss_cls: 2.0813, loss_bbox: 0.7310, loss_mask: 0.5316, loss_centerness: 0.6396, loss: 3.9836, grad_norm: 3.5805
2023-03-10 11:20:07,491 - mmdet - INFO - Epoch [1][1140/4068]	lr: 1.000e-02, eta: 0:15:57, time: 0.327, data_time: 0.026, memory: 6174, loss_cls: 2.3147, loss_bbox: 0.7713, loss_mask: 0.5397, loss_centerness: 0.5958, loss: 4.2215, grad_norm: 4.6169
2023-03-10 11:20:10,880 - mmdet - INFO - Epoch [1][1150/4068]	lr: 1.000e-02, eta: 0:15:54, time: 0.339, data_time: 0.025, memory: 6174, loss_cls: 2.0970, loss_bbox: 0.9160, loss_mask: 0.5843, loss_centerness: 0.6927, loss: 4.2901, grad_norm: 4.7854
2023-03-10 11:20:14,109 - mmdet - INFO - Epoch [1][1160/4068]	lr: 1.000e-02, eta: 0:15:51, time: 0.323, data_time: 0.023, memory: 6174, loss_cls: 1.9555, loss_bbox: 0.7063, loss_mask: 0.7737, loss_centerness: 0.6027, loss: 4.0383, grad_norm: 5.3602
2023-03-10 11:20:17,406 - mmdet - INFO - Epoch [1][1170/4068]	lr: 1.000e-02, eta: 0:15:48, time: 0.330, data_time: 0.025, memory: 6174, loss_cls: 1.9501, loss_bbox: 0.7408, loss_mask: 0.6856, loss_centerness: 0.6052, loss: 3.9817, grad_norm: 4.2191
2023-03-10 11:20:20,797 - mmdet - INFO - Epoch [1][1180/4068]	lr: 1.000e-02, eta: 0:15:45, time: 0.339, data_time: 0.026, memory: 6174, loss_cls: 2.5981, loss_bbox: 0.6707, loss_mask: 0.6067, loss_centerness: 0.5920, loss: 4.4675, grad_norm: 7.4558
2023-03-10 11:20:24,035 - mmdet - INFO - Epoch [1][1190/4068]	lr: 1.000e-02, eta: 0:15:41, time: 0.324, data_time: 0.025, memory: 6174, loss_cls: 2.3652, loss_bbox: 0.6625, loss_mask: 0.5030, loss_centerness: 0.5446, loss: 4.0752, grad_norm: 4.3348
2023-03-10 11:20:27,260 - mmdet - INFO - Epoch [1][1200/4068]	lr: 1.000e-02, eta: 0:15:38, time: 0.323, data_time: 0.025, memory: 6174, loss_cls: 2.2459, loss_bbox: 0.6464, loss_mask: 0.5797, loss_centerness: 0.6755, loss: 4.1475, grad_norm: 3.6877
2023-03-10 11:20:30,521 - mmdet - INFO - Epoch [1][1210/4068]	lr: 1.000e-02, eta: 0:15:35, time: 0.326, data_time: 0.028, memory: 6174, loss_cls: 2.1404, loss_bbox: 0.7650, loss_mask: 0.5804, loss_centerness: 0.6686, loss: 4.1543, grad_norm: 3.4023
2023-03-10 11:20:33,851 - mmdet - INFO - Epoch [1][1220/4068]	lr: 1.000e-02, eta: 0:15:32, time: 0.333, data_time: 0.027, memory: 6174, loss_cls: 2.1026, loss_bbox: 0.7538, loss_mask: 0.4944, loss_centerness: 0.5892, loss: 3.9399, grad_norm: 4.0345
2023-03-10 11:20:37,200 - mmdet - INFO - Epoch [1][1230/4068]	lr: 1.000e-02, eta: 0:15:28, time: 0.335, data_time: 0.023, memory: 6174, loss_cls: 2.1270, loss_bbox: 0.9066, loss_mask: 0.5331, loss_centerness: 0.5997, loss: 4.1664, grad_norm: 4.9392
2023-03-10 11:20:40,544 - mmdet - INFO - Epoch [1][1240/4068]	lr: 1.000e-02, eta: 0:15:25, time: 0.334, data_time: 0.025, memory: 6174, loss_cls: 1.9828, loss_bbox: 1.0161, loss_mask: 0.6829, loss_centerness: 0.6198, loss: 4.3015, grad_norm: 3.7990
2023-03-10 11:20:43,944 - mmdet - INFO - Epoch [1][1250/4068]	lr: 1.000e-02, eta: 0:15:22, time: 0.340, data_time: 0.026, memory: 6174, loss_cls: 1.9227, loss_bbox: 0.8978, loss_mask: 0.5243, loss_centerness: 0.6982, loss: 4.0430, grad_norm: 3.2551
2023-03-10 11:20:47,348 - mmdet - INFO - Epoch [1][1260/4068]	lr: 1.000e-02, eta: 0:15:19, time: 0.340, data_time: 0.026, memory: 6174, loss_cls: 1.9700, loss_bbox: 0.7481, loss_mask: 0.5053, loss_centerness: 0.6700, loss: 3.8934, grad_norm: 4.1663
2023-03-10 11:20:50,594 - mmdet - INFO - Epoch [1][1270/4068]	lr: 1.000e-02, eta: 0:15:16, time: 0.325, data_time: 0.025, memory: 6174, loss_cls: 1.8162, loss_bbox: 0.6627, loss_mask: 0.5359, loss_centerness: 0.6323, loss: 3.6471, grad_norm: 4.8170
2023-03-10 11:20:53,879 - mmdet - INFO - Epoch [1][1280/4068]	lr: 1.000e-02, eta: 0:15:13, time: 0.328, data_time: 0.025, memory: 6174, loss_cls: 1.9619, loss_bbox: 0.7757, loss_mask: 0.6391, loss_centerness: 0.6661, loss: 4.0428, grad_norm: 4.4925
2023-03-10 11:20:57,199 - mmdet - INFO - Epoch [1][1290/4068]	lr: 1.000e-02, eta: 0:15:10, time: 0.332, data_time: 0.025, memory: 6174, loss_cls: 1.9173, loss_bbox: 0.9328, loss_mask: 0.6147, loss_centerness: 0.6829, loss: 4.1477, grad_norm: 5.1526
2023-03-10 11:21:00,457 - mmdet - INFO - Epoch [1][1300/4068]	lr: 1.000e-02, eta: 0:15:06, time: 0.326, data_time: 0.027, memory: 6174, loss_cls: 2.5541, loss_bbox: 0.7433, loss_mask: 0.5135, loss_centerness: 0.5487, loss: 4.3597, grad_norm: 6.1136
