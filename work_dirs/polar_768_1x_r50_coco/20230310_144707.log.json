{"env_info": "sys.platform: linux\nPython: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti\nCUDA_HOME: /home/ali/miniconda3/envs/mm-polar\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - Built with CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.2+e9cae2d", "config": "model = dict(\n    type='PolarMask',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5,\n        relu_before_extra_convs=True),\n    bbox_head=dict(\n        type='PolarMask_Head',\n        num_classes=4,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        strides=[8, 16, 32, 64, 128],\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='IoULoss', loss_weight=1.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0.0,\n            ignore_iof_thr=-1,\n            gt_max_assign_all=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        neg_pos_ratio=3,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        iou_thr=0.5,\n        nms=dict(type='nms', iou_thr=0.5),\n        max_per_img=100))\ndataset_type = 'CocoSegDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        with_label=True),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Normalize',\n        mean=[102.9801, 115.9465, 122.7717],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1280, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    imgs_per_gpu=4,\n    workers_per_gpu=5,\n    train=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                with_label=True),\n            dict(type='Resize', img_scale=(1280, 768), keep_ratio=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[102.9801, 115.9465, 122.7717],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoSegDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1280, 768),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[102.9801, 115.9465, 122.7717],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(\n    type='SGD',\n    lr=0.01,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=1)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/polar_768_1x_r50_coco'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 380529668, "exp_name": "polar_768_1x_r50_coco.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.00345, "memory": 6174, "data_time": 0.27205, "loss_cls": 375.87169, "loss_bbox": 6.21947, "loss_mask": 3.98267, "loss_centerness": 0.62081, "loss": 386.69464, "grad_norm": 10898.5418, "time": 0.64504}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.00359, "memory": 6174, "data_time": 0.02625, "loss_cls": 5.1493, "loss_bbox": 5.01951, "loss_mask": 2.23474, "loss_centerness": 0.56948, "loss": 12.97302, "grad_norm": 87.27791, "time": 0.34099}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.00372, "memory": 6174, "data_time": 0.02647, "loss_cls": 438.59819, "loss_bbox": 3.08429, "loss_mask": 0.95703, "loss_centerness": 0.65663, "loss": 443.29614, "grad_norm": 14290.50427, "time": 0.33851}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.00385, "memory": 6174, "data_time": 0.02943, "loss_cls": 12.00017, "loss_bbox": 3.78215, "loss_mask": 0.92578, "loss_centerness": 0.91281, "loss": 17.62092, "grad_norm": 457.99204, "time": 0.34171}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00399, "memory": 6174, "data_time": 0.02839, "loss_cls": 5.91672, "loss_bbox": 2.90096, "loss_mask": 0.84359, "loss_centerness": 1.58122, "loss": 11.24249, "grad_norm": 153.14834, "time": 0.34417}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.00412, "memory": 6174, "data_time": 0.02465, "loss_cls": 12.04587, "loss_bbox": 5.74713, "loss_mask": 0.88922, "loss_centerness": 1.20361, "loss": 19.88583, "grad_norm": 394.39671, "time": 0.3402}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.00425, "memory": 6174, "data_time": 0.02476, "loss_cls": 7.65127, "loss_bbox": 3.66879, "loss_mask": 0.84419, "loss_centerness": 0.97776, "loss": 13.14202, "grad_norm": 124.98172, "time": 0.3395}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 0.00439, "memory": 6174, "data_time": 0.02357, "loss_cls": 7.82406, "loss_bbox": 2.25717, "loss_mask": 0.61313, "loss_centerness": 0.71815, "loss": 11.4125, "grad_norm": 127.69303, "time": 0.33802}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 0.00452, "memory": 6174, "data_time": 0.02219, "loss_cls": 3.58898, "loss_bbox": 4.12233, "loss_mask": 0.6337, "loss_centerness": 0.71967, "loss": 9.06468, "grad_norm": 30.20355, "time": 0.33635}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00465, "memory": 6174, "data_time": 0.02294, "loss_cls": 2.79821, "loss_bbox": 4.66871, "loss_mask": 0.48822, "loss_centerness": 0.61442, "loss": 8.56955, "grad_norm": 29.61395, "time": 0.33534}
{"mode": "train", "epoch": 1, "iter": 110, "lr": 0.00479, "memory": 6174, "data_time": 0.02633, "loss_cls": 4.30667, "loss_bbox": 5.2336, "loss_mask": 0.59912, "loss_centerness": 0.71399, "loss": 10.85337, "grad_norm": 29.01945, "time": 0.34158}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 0.00492, "memory": 6174, "data_time": 0.02878, "loss_cls": 11.27063, "loss_bbox": 6.16198, "loss_mask": 0.58692, "loss_centerness": 0.68338, "loss": 18.70291, "grad_norm": 269.37236, "time": 0.34452}
{"mode": "train", "epoch": 1, "iter": 130, "lr": 0.00505, "memory": 6174, "data_time": 0.02443, "loss_cls": 3.15426, "loss_bbox": 5.02138, "loss_mask": 0.80306, "loss_centerness": 0.68056, "loss": 9.65926, "grad_norm": 21.87949, "time": 0.33868}
{"mode": "train", "epoch": 1, "iter": 140, "lr": 0.00519, "memory": 6174, "data_time": 0.02537, "loss_cls": 3.56788, "loss_bbox": 7.01729, "loss_mask": 0.74015, "loss_centerness": 0.662, "loss": 11.98732, "grad_norm": 28.15789, "time": 0.34049}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00532, "memory": 6174, "data_time": 0.0245, "loss_cls": 3.57798, "loss_bbox": 6.20649, "loss_mask": 0.61482, "loss_centerness": 0.64112, "loss": 11.04041, "grad_norm": 25.47931, "time": 0.33769}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 0.00545, "memory": 6174, "data_time": 0.02335, "loss_cls": 2.88507, "loss_bbox": 3.49778, "loss_mask": 0.52577, "loss_centerness": 0.64646, "loss": 7.55509, "grad_norm": 18.47819, "time": 0.33802}
{"mode": "train", "epoch": 1, "iter": 170, "lr": 0.00559, "memory": 6174, "data_time": 0.02449, "loss_cls": 3.35821, "loss_bbox": 7.6015, "loss_mask": 0.73102, "loss_centerness": 0.68306, "loss": 12.37379, "grad_norm": 18.23478, "time": 0.33892}
{"mode": "train", "epoch": 1, "iter": 180, "lr": 0.00572, "memory": 6174, "data_time": 0.02268, "loss_cls": 6.0578, "loss_bbox": 6.50426, "loss_mask": 0.52762, "loss_centerness": 0.52968, "loss": 13.61937, "grad_norm": 66.5369, "time": 0.33809}
{"mode": "train", "epoch": 1, "iter": 190, "lr": 0.00585, "memory": 6174, "data_time": 0.02354, "loss_cls": 3.19946, "loss_bbox": 6.6757, "loss_mask": 0.73504, "loss_centerness": 0.65019, "loss": 11.26039, "grad_norm": 19.12339, "time": 0.33864}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00599, "memory": 6174, "data_time": 0.02379, "loss_cls": 3.12693, "loss_bbox": 3.97453, "loss_mask": 0.95311, "loss_centerness": 0.62796, "loss": 8.68253, "grad_norm": 34.33182, "time": 0.3391}
